{"version":3,"sources":["webpack:///./src/pages/ibmcloud/vpc-blockstorage/index.mdx"],"names":["name","_frontmatter","PageDescription","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","isMDXComponent"],"mappings":"4LASsBA,E,4DAFTC,G,oBAAe,IAOtBC,GALgBF,EAKgB,kBALR,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAI5E,YAACT,EAAD,CAAiBS,QAAQ,oBAEzB,sCACA,2ZACA,4PACA,sCACA,gfACA,kBAAS,CACP,IAAO,wBACP,IAAO,oCAMbF,EAAWG,gBAAiB","file":"component---src-pages-ibmcloud-vpc-blockstorage-index-mdx-d9210b117f7a01d5e9ea.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/ibm-enterprise-runbooks/ibm-enterprise-runbooks/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst PageDescription = makeShortcode(\"PageDescription\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <PageDescription mdxType=\"PageDescription\">\n    </PageDescription>\n    <h2>{`Introduction`}</h2>\n    <p>{`There might be situations where customer scenario would require sharing of tiered block storage volumes of varied IOPS to be shared across computes in different availability zones. This article leverages SSHFS to overcome this limitation using a very basic service of SSH which is availabile across operating systems flavours. This recipe is specific to IBM Cloud VPC network construct.`}</p>\n    <p>{`Note: There currently is not NFS offering in VPC, but one can setup NFS servers and clients and manage them. In this article we are using sshfs instead of NFS to share the volume from one VSI to other VSIs in different regions.`}</p>\n    <h2>{`Architecture`}</h2>\n    <p>{`This recipe is based on Implementing below architecture where in block storage for VPC is mounted on virtual server based out of Dallas 1 zone. This volume is then mounted on virtual servers in zones â€“ Dallas2 and Dallas3. So whatever data is written to Dallas1 volume is replicated to Dallas2 and Dallas3. I will take virtual server hosted in Dallas1 data center as primary server or master, where as servers hosted on Dallas2 and Dallas3 as secondary servers or Slaves.`}</p>\n    <img {...{\n      \"src\": \"images/Arch_Plain.jpg\",\n      \"alt\": \"keymanagement with openshift-1\"\n    }}></img>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}