{"componentChunkName":"component---src-pages-contributing-index-mdx","path":"/contributing/","result":{"pageContext":{"frontmatter":{"title":"Contributing to the Enterprise Account Runbook","description":"Guide for contributing content to the Enterprise Account Runbook","keywords":"ibm,cloud pak,runbook,enterprise account"},"relativePagePath":"/contributing/index.mdx","titleType":"page","MdxNode":{"id":"892fa662-1b66-5c67-a753-233788d88ee5","children":[],"parent":"f879d48b-8e7f-5544-9172-c2c1e35a3e2e","internal":{"content":"---\ntitle: Contributing to the Enterprise Account Runbook \ndescription: Guide for contributing content to the Enterprise Account Runbook\nkeywords: 'ibm,cloud pak,runbook,enterprise account'\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals'\n\n<PageDescription>\n\nAnyone can contribute to the IBM Cloud Enterprise Account Runbook, whether you are an IBM'er or not. We welcome your collaboration and contributions happily, as our \nreference applications are meant to reflect your real world scenarios.\nThere are multiple ways to contribute: report bugs and improvement suggestions, improve documentation, and contribute code.\n</PageDescription> \n\n## **Enterprise Account Runbook**\n- is an organized effort managed by the IBM GSI Labs to help GSI and their customer's development teams build and deliver cloud-native solutions or solution developed using IBM Cloud Pak deployed to IBM Cloud with IBM Kubernetes and Red Hat OpenShift Managed Service. The work is managed as an Open Source project and contribution is welcome from anyone that would like to participate. The following guidelines will help everyone navigate the process of contributing. (Most of these steps will generally apply to any Open Source project.)\n\n## **Bug reports, documentation changes, and feature requests**\n\nIf you would like to contribute your experience back to the project \nin the form of encountered bug reports, necessary documentation \nchanges, or new feature requests, this can be done through the use of \nthe repository's \n[**Enterprise Account Runbook Issues**](https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks/issues) \nlist.  \n\nBefore opening a new issue, please reference the existing list to \nmake sure a similar or duplicate item does not already exist.  \nOtherwise, please be as explicit as possible when creating the new \nitem and be sure to include the following:\n\n**Bug Reports**\n- Specific Project Version\n- Deployment environment\n- A minimal, but complete, setup of steps to recreate the problem\n\n**Documentation Changes**\n- URL to existing incorrect or incomplete documentation \n(either in the project's GitHub repo or external product \ndocumentation)\n- Updates required to correct current inconsistency\n- If possible, a link to a project fork, sample, or workflow to \nexpose the gap in documentation.\n\n**Feature Requests**\n- Complete description of project feature request, including but \nnot limited to, components of the existing project that are \nimpacted, as well as additional components that may need to be \ncreated.\n- A minimal, but complete, setup of steps to recreate environment \nnecessary to identify the new feature's current gap.\n\nThe more explicit and thorough you are in opening GitHub Issues, \nthe more efficient your interaction with the maintainers will be.  \nWhen creating the GitHub Issue for your bug report, documentation \nchange, or feature request, be sure to add as many relevant labels as \nnecessary (that are defined for that specific project).  \nThese will vary by project, but will be helpful to the maintainers \nin quickly triaging your new GitHub issues.\n\n## **Content contributions**\n\nWe really value contributions. To maximize the impact of your \ncontent contributions, we request you follow the procedure and \nguidelines below.  If you are new to open source contribution and \nwould like some more pointers or guidance, you may want to check out \n[**Your First PR**](http://yourfirstpr.github.io/) and \n[**First Timers Only**](https://www.firsttimersonly.com/).  \nThese are a few projects that help on-board new contributors to the \noverall open source process.\n\n### **Forks and Pull Requests best practices**\n\nPlease ensure you follow these best practices after you read the \ninstructions for contributing. Details are explained in the detailed\ncontribution process description below.\n\n- One change / documentation update per pull request\n   - Always pull the latest changes from upstream and rebase before \ncreating any pull request.\n   - New pull requests should be created against a branch of your forked \nrepository.\n\n- All new contributions should first be tested locally before PR \nsubmission.\n   - There is a way to run a development instance of the Enterprise Account Runbook site on your local machine. Follow the instructions in \nthe <a href=\"/contributing/#testing-locally\" title=\"Testing locally\"><span>Testing locally</span></a> \nsection below to set that up. It is very easy.\n   - Make sure you test all your changes locally before submitting a \npull request.\n\n<ul>\n</ul>\n\n## **The Contribution process step by step - Github and git flow**\n\nThe internet is littered with guides and information on how to use \nand understand git.\nHowever, here's a compact guide that follows the suggested workflow.\nIf you are new to github, or just rusty with the details, it is worth\nsome minutes of your time to study this diagram, relating each step\nnumber to its description in the text below. This will help you to understand all\nthe steps in the process, and understand where you are in it as\nyou create your contribution.\n\n![Github flow](images/github_flow.png)\n\n<InlineNotification>\n  The link in step 3 provides you with more detail and context for\n  steps 1 - 3.\n</InlineNotification>\n\n1. Create your own fork of the repo in github. This can be done in\nthe GUI at\n[https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks](https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks)\nby clicking the **Fork** icon in the upper right corner. A fork or\ncopy of the repo will be created under your own github id. The URL\nwill be:\n\n   ```\n   https://github.com/<Your github ID>/\n   ```\n\n2. Go to the URL of your forked repo, and use the **Clone or download**\nbutton to copy the repo information so you can paste it\ninto your clone command in the command line to clone it to your \nlocal computer.\n\n3. Add a connection from the master branch of your local cloned\nrepository to the master branch of the upstream repository. \nThe details for this step are in \n**Step 3  Configure Git to sync your fork ...** of the link below.\nDo not miss this important step.\n\n   **Note:** More detail for steps 1-3 here: \n   [forking a repo](https://help.github.com/articles/fork-a-repo/)\n  \n4. In a terminal window command line, working from the \ndirectory of your local\ncloned repository, create a new development branch off the targeted \nupstream branch, which is `master`.\n\n   ```\n   git checkout -b <my-feature-branch> master\n   ```\n\n5. Do your work:\n   - Write your contributions or make your changes\n   - Pass your tests locally (see the description of setting up your\n   local test instance below)\n   - Commit your intermediate changes as you go and as appropriate\n   - Repeat until satisfied\n   - See the <a href=\"/contribute/#testing-locally\" title=\"Testing locally\"><span>Testing locally</span></a> section below for more information regarding running Gatsby locally\n\n6. When you are finished with all your commits and ready to push\nyour changes, fetch the latest upstream changes \n(in case other changes had been \ndelivered upstream by others while you were working on your \ncontribution).\n\n   ```\n   git fetch upstream\n   ```\n7. Rebase your local cloned repo to the latest upstream changes, \nresolving any conflicts. \nThis will 'replay' your local commits, one by one, after the changes \ndelivered upstream while you were locally developing, letting you \nmanually resolve any conflicts.\n\n   ```\n   git branch --set-upstream-to=upstream/master\n   git rebase\n   ```\n   Instructions on how to manually resolve a conflict and commit the \nnew change or skip your local replayed commit will be presented \non screen by the git CLI.\n\n8. Push the changes you added and commited to your forked repository\n(see the diagram above to understand this step).\n\n   ```\n   git push origin <my-feature-branch>\n   ```\n\n9. Create a **pull request** against the same targeted upstream branch.\nThe easiest way to do this is through the GUI. If you go to the \nupstream repo URL\n[https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks](https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks),\nafter you have done the `push` above, you should see a notice of your\npushed changes and a button to create a pull request. \n\n   **Click that button**,\nfill in a general description of the changes in your pull request, and\npreferably choose one or more reviewers from the list on the right \nside. Your pull request needs at least one reviewer's approval before\nit can be merged. More details on pull requests are in the link below.\n\n   [Creating a pull request](https://help.github.com/articles/creating-a-pull-request/)\n\n   Once the pull request has been reviewed, accepted and merged into \n   the main github repository, you should synchronise your remote \n   and local forked github repository master branch with the \n   upstream master branch. To do so, follow the steps below.\n\n10. In your local cloned repo command line, change your active branch \nto **master**. Then pull to your local cloned repo the latest \nchanges from the upstream master branch (that is, the pull request).\n\n   ```\n   git checkout master\n   git pull upstream master\n   ```\n\n11. Now push those latest upstream changes that you just pulled \nlocally to your forked repository.\n\n   ```\n   git push origin master\n   ```\n\n   Now your forked repository and your local cloned repository are\n   all caught up and synced with the main upstream repository.\n\n<ul>\n</ul>\n\n### **What Happens to your Pull Request?**\n\nThis section is just for your information. You do not have to take \nany further steps unless you are requested to by the reviewer(s).\n\nAll pull requests are automatically built and unit tested by \na Travis-CI pipeline. The pipeline will highlight to the\nreviewer if there are any missing or mis-matched elements of your \nproposed change that could create problems for the web site. If any\nsuch problems are indicated, the reviewer or maintainer will \ncontact you to request the necessary changes to resolve the issue.\n\nThe repository maintainer will inspect the content your commit. \nif approved, they will merge your changes into the upstream master branch.\n\nShould a maintainer or reviewer ask for changes to be made to the \npull request, these can be made locally and pushed to your forked \nrepository and branch. This uses the same git add, commit, and push\nsteps on the same development branch that you used when you first \ncreated the contribution.\n\nAfter the maintainer approves and merges your pull request, \nyour changes will appear on \nthe web site shortly thereafter.\n\n## **Testing locally**\n\nOnce you have forked the repository and have cloned it to your \nlocal system, you can begin contributing. The best way to contribute \nis to run the Gatsby project (the web site) locally in `dev` mode. \nThis way, as you are making changes in your development branch,\nand saving the files in your cloned repo, you can make \nsure your changes render correctly before creating a pull \nrequest. \n\n1. Once you have cloned your fork of the repository to your local \nsystem, navigate to the directory where your project resides.\n\n   ```\n   cd <your repo directory>\n   ```\n\n2. Run the following command to initialize npm in your local directory.\nThis command installs all the dependencies listed in the `package.json`\nfile.\n   \n   ```\n   npm install\n   ```\n\n3. Start Gatsby with the Carbon theme on your local system.\n\n   ```\n   npm run dev\n   ```\n\n4. Open your browser to [localhost:8000](http://localhost:8000/) to \nsee the pages you are working on and verify that your changes \nare rendered correctly.\n\n5. If further changes are required, make your modifications. \nGatsby will render the changes immediately.\n\n<ul>\n</ul>\n\nFor non-Mac users running Linux in a VM:\n\n1. Gatsby requires Node.js version 10 or above. Run the following \ncommand to check your version.\n   ```\n   node -v\n   ```\n2. Modify the `package.json` file to update the server with your \nspecific IP address and port number inside \"scripts-dev\".\n   ```\n   \"dev\": \"gatsby develop -H <your local IP address> -p 8000\"\n   ```\n3. For additional information, check out \n[Gatsby CLI](https://www.gatsbyjs.org/docs/gatsby-cli/).","type":"Mdx","contentDigest":"ac9b60e495dc616ed03581c28fca8cb6","counter":892,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Contributing to the Enterprise Account Runbook","description":"Guide for contributing content to the Enterprise Account Runbook","keywords":"ibm,cloud pak,runbook,enterprise account"},"exports":{},"rawBody":"---\ntitle: Contributing to the Enterprise Account Runbook \ndescription: Guide for contributing content to the Enterprise Account Runbook\nkeywords: 'ibm,cloud pak,runbook,enterprise account'\n---\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals'\n\n<PageDescription>\n\nAnyone can contribute to the IBM Cloud Enterprise Account Runbook, whether you are an IBM'er or not. We welcome your collaboration and contributions happily, as our \nreference applications are meant to reflect your real world scenarios.\nThere are multiple ways to contribute: report bugs and improvement suggestions, improve documentation, and contribute code.\n</PageDescription> \n\n## **Enterprise Account Runbook**\n- is an organized effort managed by the IBM GSI Labs to help GSI and their customer's development teams build and deliver cloud-native solutions or solution developed using IBM Cloud Pak deployed to IBM Cloud with IBM Kubernetes and Red Hat OpenShift Managed Service. The work is managed as an Open Source project and contribution is welcome from anyone that would like to participate. The following guidelines will help everyone navigate the process of contributing. (Most of these steps will generally apply to any Open Source project.)\n\n## **Bug reports, documentation changes, and feature requests**\n\nIf you would like to contribute your experience back to the project \nin the form of encountered bug reports, necessary documentation \nchanges, or new feature requests, this can be done through the use of \nthe repository's \n[**Enterprise Account Runbook Issues**](https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks/issues) \nlist.  \n\nBefore opening a new issue, please reference the existing list to \nmake sure a similar or duplicate item does not already exist.  \nOtherwise, please be as explicit as possible when creating the new \nitem and be sure to include the following:\n\n**Bug Reports**\n- Specific Project Version\n- Deployment environment\n- A minimal, but complete, setup of steps to recreate the problem\n\n**Documentation Changes**\n- URL to existing incorrect or incomplete documentation \n(either in the project's GitHub repo or external product \ndocumentation)\n- Updates required to correct current inconsistency\n- If possible, a link to a project fork, sample, or workflow to \nexpose the gap in documentation.\n\n**Feature Requests**\n- Complete description of project feature request, including but \nnot limited to, components of the existing project that are \nimpacted, as well as additional components that may need to be \ncreated.\n- A minimal, but complete, setup of steps to recreate environment \nnecessary to identify the new feature's current gap.\n\nThe more explicit and thorough you are in opening GitHub Issues, \nthe more efficient your interaction with the maintainers will be.  \nWhen creating the GitHub Issue for your bug report, documentation \nchange, or feature request, be sure to add as many relevant labels as \nnecessary (that are defined for that specific project).  \nThese will vary by project, but will be helpful to the maintainers \nin quickly triaging your new GitHub issues.\n\n## **Content contributions**\n\nWe really value contributions. To maximize the impact of your \ncontent contributions, we request you follow the procedure and \nguidelines below.  If you are new to open source contribution and \nwould like some more pointers or guidance, you may want to check out \n[**Your First PR**](http://yourfirstpr.github.io/) and \n[**First Timers Only**](https://www.firsttimersonly.com/).  \nThese are a few projects that help on-board new contributors to the \noverall open source process.\n\n### **Forks and Pull Requests best practices**\n\nPlease ensure you follow these best practices after you read the \ninstructions for contributing. Details are explained in the detailed\ncontribution process description below.\n\n- One change / documentation update per pull request\n   - Always pull the latest changes from upstream and rebase before \ncreating any pull request.\n   - New pull requests should be created against a branch of your forked \nrepository.\n\n- All new contributions should first be tested locally before PR \nsubmission.\n   - There is a way to run a development instance of the Enterprise Account Runbook site on your local machine. Follow the instructions in \nthe <a href=\"/contributing/#testing-locally\" title=\"Testing locally\"><span>Testing locally</span></a> \nsection below to set that up. It is very easy.\n   - Make sure you test all your changes locally before submitting a \npull request.\n\n<ul>\n</ul>\n\n## **The Contribution process step by step - Github and git flow**\n\nThe internet is littered with guides and information on how to use \nand understand git.\nHowever, here's a compact guide that follows the suggested workflow.\nIf you are new to github, or just rusty with the details, it is worth\nsome minutes of your time to study this diagram, relating each step\nnumber to its description in the text below. This will help you to understand all\nthe steps in the process, and understand where you are in it as\nyou create your contribution.\n\n![Github flow](images/github_flow.png)\n\n<InlineNotification>\n  The link in step 3 provides you with more detail and context for\n  steps 1 - 3.\n</InlineNotification>\n\n1. Create your own fork of the repo in github. This can be done in\nthe GUI at\n[https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks](https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks)\nby clicking the **Fork** icon in the upper right corner. A fork or\ncopy of the repo will be created under your own github id. The URL\nwill be:\n\n   ```\n   https://github.com/<Your github ID>/\n   ```\n\n2. Go to the URL of your forked repo, and use the **Clone or download**\nbutton to copy the repo information so you can paste it\ninto your clone command in the command line to clone it to your \nlocal computer.\n\n3. Add a connection from the master branch of your local cloned\nrepository to the master branch of the upstream repository. \nThe details for this step are in \n**Step 3  Configure Git to sync your fork ...** of the link below.\nDo not miss this important step.\n\n   **Note:** More detail for steps 1-3 here: \n   [forking a repo](https://help.github.com/articles/fork-a-repo/)\n  \n4. In a terminal window command line, working from the \ndirectory of your local\ncloned repository, create a new development branch off the targeted \nupstream branch, which is `master`.\n\n   ```\n   git checkout -b <my-feature-branch> master\n   ```\n\n5. Do your work:\n   - Write your contributions or make your changes\n   - Pass your tests locally (see the description of setting up your\n   local test instance below)\n   - Commit your intermediate changes as you go and as appropriate\n   - Repeat until satisfied\n   - See the <a href=\"/contribute/#testing-locally\" title=\"Testing locally\"><span>Testing locally</span></a> section below for more information regarding running Gatsby locally\n\n6. When you are finished with all your commits and ready to push\nyour changes, fetch the latest upstream changes \n(in case other changes had been \ndelivered upstream by others while you were working on your \ncontribution).\n\n   ```\n   git fetch upstream\n   ```\n7. Rebase your local cloned repo to the latest upstream changes, \nresolving any conflicts. \nThis will 'replay' your local commits, one by one, after the changes \ndelivered upstream while you were locally developing, letting you \nmanually resolve any conflicts.\n\n   ```\n   git branch --set-upstream-to=upstream/master\n   git rebase\n   ```\n   Instructions on how to manually resolve a conflict and commit the \nnew change or skip your local replayed commit will be presented \non screen by the git CLI.\n\n8. Push the changes you added and commited to your forked repository\n(see the diagram above to understand this step).\n\n   ```\n   git push origin <my-feature-branch>\n   ```\n\n9. Create a **pull request** against the same targeted upstream branch.\nThe easiest way to do this is through the GUI. If you go to the \nupstream repo URL\n[https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks](https://github.com/ibm-gsi-ecosystem/ibm-enterprise-runbooks),\nafter you have done the `push` above, you should see a notice of your\npushed changes and a button to create a pull request. \n\n   **Click that button**,\nfill in a general description of the changes in your pull request, and\npreferably choose one or more reviewers from the list on the right \nside. Your pull request needs at least one reviewer's approval before\nit can be merged. More details on pull requests are in the link below.\n\n   [Creating a pull request](https://help.github.com/articles/creating-a-pull-request/)\n\n   Once the pull request has been reviewed, accepted and merged into \n   the main github repository, you should synchronise your remote \n   and local forked github repository master branch with the \n   upstream master branch. To do so, follow the steps below.\n\n10. In your local cloned repo command line, change your active branch \nto **master**. Then pull to your local cloned repo the latest \nchanges from the upstream master branch (that is, the pull request).\n\n   ```\n   git checkout master\n   git pull upstream master\n   ```\n\n11. Now push those latest upstream changes that you just pulled \nlocally to your forked repository.\n\n   ```\n   git push origin master\n   ```\n\n   Now your forked repository and your local cloned repository are\n   all caught up and synced with the main upstream repository.\n\n<ul>\n</ul>\n\n### **What Happens to your Pull Request?**\n\nThis section is just for your information. You do not have to take \nany further steps unless you are requested to by the reviewer(s).\n\nAll pull requests are automatically built and unit tested by \na Travis-CI pipeline. The pipeline will highlight to the\nreviewer if there are any missing or mis-matched elements of your \nproposed change that could create problems for the web site. If any\nsuch problems are indicated, the reviewer or maintainer will \ncontact you to request the necessary changes to resolve the issue.\n\nThe repository maintainer will inspect the content your commit. \nif approved, they will merge your changes into the upstream master branch.\n\nShould a maintainer or reviewer ask for changes to be made to the \npull request, these can be made locally and pushed to your forked \nrepository and branch. This uses the same git add, commit, and push\nsteps on the same development branch that you used when you first \ncreated the contribution.\n\nAfter the maintainer approves and merges your pull request, \nyour changes will appear on \nthe web site shortly thereafter.\n\n## **Testing locally**\n\nOnce you have forked the repository and have cloned it to your \nlocal system, you can begin contributing. The best way to contribute \nis to run the Gatsby project (the web site) locally in `dev` mode. \nThis way, as you are making changes in your development branch,\nand saving the files in your cloned repo, you can make \nsure your changes render correctly before creating a pull \nrequest. \n\n1. Once you have cloned your fork of the repository to your local \nsystem, navigate to the directory where your project resides.\n\n   ```\n   cd <your repo directory>\n   ```\n\n2. Run the following command to initialize npm in your local directory.\nThis command installs all the dependencies listed in the `package.json`\nfile.\n   \n   ```\n   npm install\n   ```\n\n3. Start Gatsby with the Carbon theme on your local system.\n\n   ```\n   npm run dev\n   ```\n\n4. Open your browser to [localhost:8000](http://localhost:8000/) to \nsee the pages you are working on and verify that your changes \nare rendered correctly.\n\n5. If further changes are required, make your modifications. \nGatsby will render the changes immediately.\n\n<ul>\n</ul>\n\nFor non-Mac users running Linux in a VM:\n\n1. Gatsby requires Node.js version 10 or above. Run the following \ncommand to check your version.\n   ```\n   node -v\n   ```\n2. Modify the `package.json` file to update the server with your \nspecific IP address and port number inside \"scripts-dev\".\n   ```\n   \"dev\": \"gatsby develop -H <your local IP address> -p 8000\"\n   ```\n3. For additional information, check out \n[Gatsby CLI](https://www.gatsbyjs.org/docs/gatsby-cli/).","fileAbsolutePath":"/home/runner/work/ibm-enterprise-runbooks/ibm-enterprise-runbooks/src/pages/contributing/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","243517648","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550","817386451"]}