{"componentChunkName":"component---src-pages-ibmcloud-hyper-protect-services-index-mdx","path":"/ibmcloud/hyper-protect-services/","result":{"pageContext":{"frontmatter":{"title":"Hyper Protect Services"},"relativePagePath":"/ibmcloud/hyper-protect-services/index.mdx","titleType":"page","MdxNode":{"id":"82b01a02-4d4e-5fc8-93c9-d57771672cfa","children":[],"parent":"8b51d004-3ab5-55e6-94e2-a69c3e79268f","internal":{"content":"---\ntitle: Hyper Protect Services\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n\n</PageDescription>\n\n## **Overview**\n\nIBM Cloud® Hyper Protect Crypto Services (HPCS) is a dedicated key management service and hardware security module (HSM)\nbased on IBM Cloud. With this service, you can take the ownership of the cloud HSM to fully manage your encryption keys and to perform cryptographic operations. Hyper Protect Crypto Services is also the only service in the cloud industry that is built on FIPS 140-2 Level 4-certified hardware.\n\n\n## **Hyper Protect Crypto Services**\n\nHyper Protect Crypto Services integrates with Key Protect application programming interface (API) to generate and manage keys. The Keep Your Own Key (KYOK) function is also enabled to provide access to cloud-based cryptographic HSMs. You can access the network addressable HSMs by making standard PKCS #11 API calls or Enterprise PKCS #11 over gRPC (GREP11) API calls to perform cryptographic operations.\n\nYou can provision Hyper protect Crypto Services using IBM cloud catalog or using terraform script:\n\n<Tabs>\n\n<Tab label=\"Provision HPCS using IBM cloud\" open=\"true\">\n\n![hpcs-1](images/hpcs-1.png)\n![hpcs-2](images/hpcs-2.png)\n\nFor more details please refer https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-provision\n</Tab>\n\n<Tab label=\"Provision HPCS using terraform script\" open=\"true\">\n\n```\nInput parameters required:\n\napi key\n\nno. of crypto unit\n\nregion\n\nresours group name\n\n```\n\n[Terraform module to provision Hyper protect Crypto service](https://github.com/yogendrasri/terraform-ibm-hpcs)\n\n```\ngit clone https://github.com/yogendrasri/terraform-ibm-hpcs.git\ncd terraform-ibm-hpcs\n```\n\n```\ndocker run -it --rm -v ${PWD}:/terraform quay.io/ibmgaragecloud/cli-tools:v0.12.0-lite\n```\n\n```\ncd /terraform\nterraform init\n```\n\n```\nterraform plan\n```\n\n```\nterraform apply\n```\n</Tab>\n</Tabs>\n\n## **Post install steps**\n\nOnce a Hyper Protect Crypto Service (HPCS) has been provisioned, it must be initialized before it can be used. Currently, the initialization process must be performed manually. \nThere are three ways to initialize HPCS:\n\n1) Use Smart card - For the highest level of security, choose this option. It uses smart cards to store signature keys and master key parts. Signature keys and master key parts never appear in the clear outside the smart card.\n\n2) Use recovery crypto unit - If one or more recovery crypto units are allocated for your service instance, you can choose this option. A random master key value is automatically generated in a recovery crypto unit and never appears in the clear outside of the HSMs.\n\n3) Use key part files - Initialize your service instance by using master key parts that you create and store in files on your local workstation. In this case, the workstation key files serve as a backup copy of your master key value.\n\nWe are explaining method 2 in this tutorial. The following steps must be followed to complete the initialization: \n\n### **Key Ceremony**\n\n### Prerequisites \n\n### Install TKE CLI plugin\n```\nibmcloud plugin install tke\n```\n\nSet the environment variable CLOUDTKEFILES on your workstation to specify the directory where you want to save the master key part files and signature key files. The signature keys are used to sign TKE administrative commands.\n\nOn the Linux® operating system or MacOS, add the following line to the .bash_profile file:\n```\nexport CLOUDTKEFILES=[local-directory]\n```\n\nLogin to IBM Cloud\n\n```\nibmcloud login  --apikey <apikey> -a cloud.ibm.com -r region -g <resource group>\n```\n\n### Initializing HPCS using recovery crypto unit\n\n```\nibmcloud tke auto-init\n```\nOutput\n```\nA common set of administrators will be loaded in all crypto units assigned to the service instance, the signature thresholds will be set the same, and a random master key value will be generated in one crypto unit and exported to the other crypto units.\n\nPress enter to continue or Ctrl-c to exit.\n> \n\n\nENTER SIGNATURE THRESHOLD VALUES\n\nEnter the number of signatures to be required on commands sent to the service instance.\nThis must be a number between 1 and 8.\nTo enforce dual control, this must be at least 2:\n> 1\n\nEnter the number of signatures to be required on commands to remove an administrator.\nThis must be a number between 1 and 8.\nTo enforce dual control, this must be at least 2:\n> 1\n\n\nENTER NUMBER OF ADMINISTRATORS TO INSTALL\n\nTo initialize and maintain your crypto units, administrators must be installed.\nEach administrator has an associated signature key.\nSignature keys are stored in files protected by a password.\nTo use the signature key, you must supply the password.\n\nTo enforce dual control, each signature key file should be assigned to a different user and only that user should know the password.\n\nYou can install up to eight administrators in a crypto unit.\nTo set a signature threshold value of 1 and a revocation signature threshold of 1, you must install at least 1 administrator.\n\nEnter the number of administrators you want to install:\n> 1\n\nNo signature key files were found on this workstation.\nOne signature key file will be created.\n\nCreating signature key file 1 of 1...\n\nEnter an administrator name to be associated with the signature key:\n> admin1\nEnter a password to protect the signature key:\n> \nRe-enter the password to confirm:\n> \n\nInstalling 1 of 1 administrators...\nSetting signature thresholds...\nGenerating a random master key value...\nTransferring the master key value to 1 of 3 crypto units...\nTransferring the master key value to 2 of 3 crypto units...\nTransferring the master key value to 3 of 3 crypto units...\n\nOK\nThe selected service instance has been initialized.\nTo see what administrators are installed and what signature threshold and master key register values are set, use the 'ibmcloud tke cryptounit-compare' command.\n\n```\n### Verify initialization\n Use the following command to check the status of crypto units to make sure all the current master key registers are in the VALID state:\n\n```\nibmcloud tke cryptounit-compare\n```\nOutput\n```\nSIGNATURE THRESHOLDS\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   SIGNATURE THRESHOLD   REVOCATION THRESHOLD   \n1                 1                     1   \n2                 1                     1   \n3*                1                     1   \n4*                1                     1   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n==> Crypto units with a signature threshold of 0 are in IMPRINT MODE. <==\n\n\nCRYPTO UNIT ADMINISTRATORS\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   ADMIN NAME   SUBJECT KEY IDENTIFIER   \n1                 admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n2                 admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n3*                admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n4*                admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n\nNEW MASTER KEY REGISTER\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   STATUS   VERIFICATION PATTERN   \n1                 Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n2                 Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n3*                Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n4*                Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n\n\nCURRENT MASTER KEY REGISTER\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   STATUS   VERIFICATION PATTERN   \n1                 Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n2                 Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n3*                Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n4*                Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n\nCONTROL POINTS\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   XCP_CPB_ALG_EC_25519   XCP_CPB_BTC   XCP_CPB_ECDSA_OTHER   \n1                 Set                    Set           Set   \n2                 Set                    Set           Set   \n3*                Set                    Set           Set   \n4*                Set                    Set           Set   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n==> All crypto units are configured the same. <==\n\n```\n\nFor more details refer recovery crypto unit https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-initialize-hsm-recovery-crypto-unit\n\n## **Create root key**\n\n1) From the IBM Cloud console open HPCS service, click Key management service keys > Add key.\n\n2) Provide key type (root).\n\n3) Provide Key name.\n\n4) When you finish filling out the key's details, click Create key to confirm.\n\n![key-added](images/key-added.png)\n\n## **Authorize HPCS for use with HPDBaaS for MongoDB service instances:**\n\n1) Go to the IBM Cloud console.\n    \n2) From the menu bar, click Manage > Access (IAM).\n\n3) In the side navigation, click Authorizations.\n\n4) Click Create.\n    \n5) In the Source service menu, select Hyper Protect DBaaS for MongoDB.\n\n6) In the Target service menu, select Hyper Protect Crypto Services.\n   \n7) Enable the Reader role.\n\n8) Click Authorize.\n\n\n## **Hyper Protect DBaaS**\n\nIBM Cloud® Hyper Protect DBaaS (HPDBaaS) provides tamper-proof, enterprise cloud database environments with high availability for workloads with sensitive data. It offers a flexible platform that allows you to easily provision and manage your database of choice (MongoDB and PostgreSQL), without data security concerns.\nBuilt on IBM LinuxONE technology, Hyper Protect DBaaS for MongoDB helps you to alleviate data security and compliance concerns with built-in encryption and tamper protection for data at rest and in flight. You can deploy your workloads with sensitive data and build compliant applications without having to be a security expert.\nHyper Protect DBaaS for MongoDB provides a reliable environment that allows you to become more agile in application development. You can quickly get started and move your mission-critical data to the highly available and managed database clusters, saving time and costs on operations. You can also flexibly adjust the amount of resources to meet your requirements.\n\nYou can provision Hyper protect DBaaS for MongoDB using IBM cloud catalog or using terraform script mentioned below:\n\n<Tabs>\n\n<Tab label=\"Provision HPDBaaS for MongoDB using IBM cloud\" open=\"true\">\n\n![hpdbaas-1](images/hpdbaas-1.png)\n![hpdbaas-3](images/hpdbaas-3.png)\n\nFor security purpose, it is recomendded to have private endpoint.\n\nLocation and HPCS region should be same.\n\nFor more details please refer https://cloud.ibm.com/docs/hyper-protect-dbaas-for-mongodb?topic=hyper-protect-dbaas-for-mongodb-create-service\n\n</Tab>\n\n<Tab label=\"Provision HPDBaaS for MongoDB using terraform script\" open=\"true\">\n\n```\nInput parameters required:\n\napi key\n\nname of database admin\n\ncluster name\n\npassword.  —   15 characters minimum, at least one uppercase character, one lowercase character and one number\n\nconfirm password. —  15 characters minimum, at least one uppercase character, one lowercase character and one number\n\nHPCS name\n\nHPCS key\n\nHPCS region\n\nHPCS resources group\n\nname prefix\n\nplan\n\nresource group name \n\nresource location - This resource location and HPCS region should be same\n\n\n```\nBy default private_endpoint is true in terraform script.\n\n[Terraform module to provision Hyper protect DBaaS for MongoDB](https://github.com/yogendrasri/terraform-ibm-hpdbaas-mongodb)\n\n```\ngit clone https://github.com/yogendrasri/terraform-ibm-hpdbaas-mongodb.git\ncd terraform-ibm-hpdbaas-mongodb\n```\n\n```\ndocker run -it --rm -v ${PWD}:/terraform quay.io/ibmgaragecloud/cli-tools:v0.12.0-lite\n```\n\n```\ncd /terraform\nterraform init\n```\n\n```\nterraform plan\n```\n\n```\nterraform apply\n```\n\n</Tab>\n</Tabs>\n\n## **Hyper Protect Virtual Servers**\n\nIBM Cloud Hyper Protect Virtual Servers (HPVS) grant you complete authority over your Linux-based virtual servers for workloads that contain sensitive data and business IP. They offer a confidential computing environment, addressing your top security concerns for peace of mind when building applications in the cloud and helping you with the following issues:\n\n- Memory protection through a trusted execution environment\n- Data-at-rest and data-in-flight encryption\n- Prevention of unauthorized access\n\nYou can provision Hyper protect Virtual Servers using IBM cloud catalog or using terraform script mentioned below:\n\n<Tabs>\n\n<Tab label=\"Provision  HPVS using IBM cloud\" open=\"true\">\n\n![hpvs-1](images/hpvs-1.png)\n![hpvs-2](images/hpvs-2.png)\nFor generating SSH key Please refer https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-generate_ssh\n\nFor more details please refer https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-provision\n\n</Tab>\n<Tab label=\"Provision HPVS using terraform script\" open=\"true\">\n\n```\nInput parameters required:\n\napi key\n\nsshPublicKey  -- For generating SSH key Please refer https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-generate_ssh\n\nresource group name. \n\nname prefix \n\nresource location dal10, fra02, syd01\n\n```\n\n[Terraform module to provision Hyper protect Virtual Servers](https://github.com/yogendrasri/terraform-ibm-vpc-vsi)\n\n```\ngit clone https://github.com/yogendrasri/terraform-ibm-vpc-vsi.git\ncd terraform-ibm-vpc-vsi\n```\n\n```\ndocker run -it --rm -v ${PWD}:/terraform quay.io/ibmgaragecloud/cli-tools:v0.12.0-lite\n```\n\n```\ncd /terraform\nterraform init\n```\n\n```\nterraform plan\n```\n\n```\nterraform apply\n```\n</Tab>\n</Tabs>\n\n## **Deploy application on Hyper Protect Virtual Server**\n\nThis Code Pattern is a node.js application that allows for the creation of keys, one for each \"team\" or \"service. It uses that key to encrypt some customer data, ahead of being stored in the database. In this way, it demonstrates the above example, while showing how to use the Key Protect RESTful API provided by an instance of IBM Cloud Hyper Protect Crypto Services. IBM Cloud Hyper Protect DBaaS for MongoDB is used as the database as it provides a standard MongoDB managed service, encrypted to anyone outside of the organisation with legitimate access to it. The application runs in a Docker container, for example on a Mac or Linux laptop, or following the directions below, on IBM Cloud Hyper Protect Virtual Servers, for runtime protection in the public cloud.\n\nWhen you have completed this code pattern, you will understand how to:\n\n- Build and run a Docker container\n- Get environment variables in a node.js app, from Docker\n- Create an IBM Cloud IAM API key\n- Drive the IBM Cloud Key Protect REST API, offered by IBM Cloud Hyper Protect Crypto Services\n\n[Code pattern](https://developer.ibm.com/patterns/create-a-secured-microservices-and-deploy-it-to-a-consolidated-database/)\n\n\n### **Command to start application**\n\nUser can get HPCS parameters from HPCS service overview page.\n\nUser can get MongoDB parameters from HPDBBAS for MONGODB Service manage page.\n\nUser can get HPVS parameters like ip address from HPVS manage page.\n\nProvisioning of HPCS, HPDBBAS for MONGODB and HPVS is already done, user can start from the step Obtain an API Key provided in git repo mentioned below. \n\nYou can refer the this git repo for the source code of this Application:\nhttps://github.com/IBM/secured-microservices-writing-to-a-consolidated-database\n\n```\ndocker run -e IBM_API_KEY=‘<API KEY>’ \\\n           -e IAM_PATH='https://iam.cloud.ibm.com/identity/token' \\\n           -e MONGO_USER=‘<username>’ \\\n           -e MONGO_PASS=‘<password>’ \\\n           -e ROOT_KEY_ID=‘<HPCS root Key ID>’ \\\n           -e KP_URL=‘<HPCS PRIVATE URL>’ \\\n           -e KP_PATH='/api/v2/keys' \\\n           -e KP_INSTANCE=‘<HPCS Instance ID>’ \\\n           -e MONGO_ENDPOINTS=‘<mongodb URL:port,mongodb URL:port>’ \\\n           -e MONGO_CLUSTER_NAME=‘<mongodb cluster>’ \\\n           -e MONGO_DB_NAME=‘<Mongo DB name>’ \\\n           -dp 3000:3000 secure-microservice\n```\n\n### Application output\n\nThe main page of application that explains how HPCS, HPDBaaS works along with application deployed on HPVS:  \n![ui-frontpage](images/ui-frontpage.png)\n\nCreate a new team, and associated key provided by Crypto Services(HPCS):\n![ui-generatedek](images/ui-generatedek.png)\n\nFill the details and submit the form, user can use auto generated deatils as well:\n![ui-custsubmitform](images/ui-custsubmitform.png)\n\nConformation of Data stored in MongoDB:\n![ui-confirm](images/ui-confirm.png)\n\nRetrieve the information from MongoDB, all the data stored is encrypted:\n![ui-retrieveinfo](images/ui-retrieveinfo.png)\n\nYou can view encrpted data by selecting the row, provided user belongs to the same team: \n![ui-decryted-data](images/ui-decryted-data.png)\n\nIf user does not belongs to the same team data would be in ciphertext:\n![ui-encrypt-data](images/ui-encrypt-data.png)\n\n\n\n\n### **Resources**\n- [For more details about Hyper Protect crypto services](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started)\n- [For more details about Hyper Protect DBaaS for MongoDB](https://cloud.ibm.com/docs/hyper-protect-dbaas-for-mongodb?topic=hyper-protect-dbaas-for-mongodb-gettingstarted)\n- [For more details about Hyper Protect Virtual Servers](https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-getting-started)\n- [For more details about code pattern used to deploy in HPVS](https://developer.ibm.com/patterns/create-a-secured-microservices-and-deploy-it-to-a-consolidated-database/)\n","type":"Mdx","contentDigest":"1ee37d2aea167bfc06a206c570777a29","owner":"gatsby-plugin-mdx","counter":908},"frontmatter":{"title":"Hyper Protect Services"},"exports":{},"rawBody":"---\ntitle: Hyper Protect Services\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n\n</PageDescription>\n\n## **Overview**\n\nIBM Cloud® Hyper Protect Crypto Services (HPCS) is a dedicated key management service and hardware security module (HSM)\nbased on IBM Cloud. With this service, you can take the ownership of the cloud HSM to fully manage your encryption keys and to perform cryptographic operations. Hyper Protect Crypto Services is also the only service in the cloud industry that is built on FIPS 140-2 Level 4-certified hardware.\n\n\n## **Hyper Protect Crypto Services**\n\nHyper Protect Crypto Services integrates with Key Protect application programming interface (API) to generate and manage keys. The Keep Your Own Key (KYOK) function is also enabled to provide access to cloud-based cryptographic HSMs. You can access the network addressable HSMs by making standard PKCS #11 API calls or Enterprise PKCS #11 over gRPC (GREP11) API calls to perform cryptographic operations.\n\nYou can provision Hyper protect Crypto Services using IBM cloud catalog or using terraform script:\n\n<Tabs>\n\n<Tab label=\"Provision HPCS using IBM cloud\" open=\"true\">\n\n![hpcs-1](images/hpcs-1.png)\n![hpcs-2](images/hpcs-2.png)\n\nFor more details please refer https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-provision\n</Tab>\n\n<Tab label=\"Provision HPCS using terraform script\" open=\"true\">\n\n```\nInput parameters required:\n\napi key\n\nno. of crypto unit\n\nregion\n\nresours group name\n\n```\n\n[Terraform module to provision Hyper protect Crypto service](https://github.com/yogendrasri/terraform-ibm-hpcs)\n\n```\ngit clone https://github.com/yogendrasri/terraform-ibm-hpcs.git\ncd terraform-ibm-hpcs\n```\n\n```\ndocker run -it --rm -v ${PWD}:/terraform quay.io/ibmgaragecloud/cli-tools:v0.12.0-lite\n```\n\n```\ncd /terraform\nterraform init\n```\n\n```\nterraform plan\n```\n\n```\nterraform apply\n```\n</Tab>\n</Tabs>\n\n## **Post install steps**\n\nOnce a Hyper Protect Crypto Service (HPCS) has been provisioned, it must be initialized before it can be used. Currently, the initialization process must be performed manually. \nThere are three ways to initialize HPCS:\n\n1) Use Smart card - For the highest level of security, choose this option. It uses smart cards to store signature keys and master key parts. Signature keys and master key parts never appear in the clear outside the smart card.\n\n2) Use recovery crypto unit - If one or more recovery crypto units are allocated for your service instance, you can choose this option. A random master key value is automatically generated in a recovery crypto unit and never appears in the clear outside of the HSMs.\n\n3) Use key part files - Initialize your service instance by using master key parts that you create and store in files on your local workstation. In this case, the workstation key files serve as a backup copy of your master key value.\n\nWe are explaining method 2 in this tutorial. The following steps must be followed to complete the initialization: \n\n### **Key Ceremony**\n\n### Prerequisites \n\n### Install TKE CLI plugin\n```\nibmcloud plugin install tke\n```\n\nSet the environment variable CLOUDTKEFILES on your workstation to specify the directory where you want to save the master key part files and signature key files. The signature keys are used to sign TKE administrative commands.\n\nOn the Linux® operating system or MacOS, add the following line to the .bash_profile file:\n```\nexport CLOUDTKEFILES=[local-directory]\n```\n\nLogin to IBM Cloud\n\n```\nibmcloud login  --apikey <apikey> -a cloud.ibm.com -r region -g <resource group>\n```\n\n### Initializing HPCS using recovery crypto unit\n\n```\nibmcloud tke auto-init\n```\nOutput\n```\nA common set of administrators will be loaded in all crypto units assigned to the service instance, the signature thresholds will be set the same, and a random master key value will be generated in one crypto unit and exported to the other crypto units.\n\nPress enter to continue or Ctrl-c to exit.\n> \n\n\nENTER SIGNATURE THRESHOLD VALUES\n\nEnter the number of signatures to be required on commands sent to the service instance.\nThis must be a number between 1 and 8.\nTo enforce dual control, this must be at least 2:\n> 1\n\nEnter the number of signatures to be required on commands to remove an administrator.\nThis must be a number between 1 and 8.\nTo enforce dual control, this must be at least 2:\n> 1\n\n\nENTER NUMBER OF ADMINISTRATORS TO INSTALL\n\nTo initialize and maintain your crypto units, administrators must be installed.\nEach administrator has an associated signature key.\nSignature keys are stored in files protected by a password.\nTo use the signature key, you must supply the password.\n\nTo enforce dual control, each signature key file should be assigned to a different user and only that user should know the password.\n\nYou can install up to eight administrators in a crypto unit.\nTo set a signature threshold value of 1 and a revocation signature threshold of 1, you must install at least 1 administrator.\n\nEnter the number of administrators you want to install:\n> 1\n\nNo signature key files were found on this workstation.\nOne signature key file will be created.\n\nCreating signature key file 1 of 1...\n\nEnter an administrator name to be associated with the signature key:\n> admin1\nEnter a password to protect the signature key:\n> \nRe-enter the password to confirm:\n> \n\nInstalling 1 of 1 administrators...\nSetting signature thresholds...\nGenerating a random master key value...\nTransferring the master key value to 1 of 3 crypto units...\nTransferring the master key value to 2 of 3 crypto units...\nTransferring the master key value to 3 of 3 crypto units...\n\nOK\nThe selected service instance has been initialized.\nTo see what administrators are installed and what signature threshold and master key register values are set, use the 'ibmcloud tke cryptounit-compare' command.\n\n```\n### Verify initialization\n Use the following command to check the status of crypto units to make sure all the current master key registers are in the VALID state:\n\n```\nibmcloud tke cryptounit-compare\n```\nOutput\n```\nSIGNATURE THRESHOLDS\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   SIGNATURE THRESHOLD   REVOCATION THRESHOLD   \n1                 1                     1   \n2                 1                     1   \n3*                1                     1   \n4*                1                     1   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n==> Crypto units with a signature threshold of 0 are in IMPRINT MODE. <==\n\n\nCRYPTO UNIT ADMINISTRATORS\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   ADMIN NAME   SUBJECT KEY IDENTIFIER   \n1                 admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n2                 admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n3*                admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n4*                admin1       d153cf349e9aeb41d0ce84d8fb43a5...   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n\nNEW MASTER KEY REGISTER\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   STATUS   VERIFICATION PATTERN   \n1                 Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n2                 Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n3*                Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n4*                Empty    00000000000000000000000000000000   \n                           00000000000000000000000000000000   \n\n\nCURRENT MASTER KEY REGISTER\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   STATUS   VERIFICATION PATTERN   \n1                 Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n2                 Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n3*                Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n4*                Valid    730ebf29e88df393ba3a0bdf491f3fe2   \n                           a107734db4221d7e0ad795b902abdd49   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n\nCONTROL POINTS\nSERVICE INSTANCE: 7ba22c61-5cca-4045-953a-39c27aa1af05\nCRYPTO UNIT NUM   XCP_CPB_ALG_EC_25519   XCP_CPB_BTC   XCP_CPB_ECDSA_OTHER   \n1                 Set                    Set           Set   \n2                 Set                    Set           Set   \n3*                Set                    Set           Set   \n4*                Set                    Set           Set   \n\n* Indicates a recovery crypto unit used only to hold a backup master key value.\n\n==> All crypto units are configured the same. <==\n\n```\n\nFor more details refer recovery crypto unit https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-initialize-hsm-recovery-crypto-unit\n\n## **Create root key**\n\n1) From the IBM Cloud console open HPCS service, click Key management service keys > Add key.\n\n2) Provide key type (root).\n\n3) Provide Key name.\n\n4) When you finish filling out the key's details, click Create key to confirm.\n\n![key-added](images/key-added.png)\n\n## **Authorize HPCS for use with HPDBaaS for MongoDB service instances:**\n\n1) Go to the IBM Cloud console.\n    \n2) From the menu bar, click Manage > Access (IAM).\n\n3) In the side navigation, click Authorizations.\n\n4) Click Create.\n    \n5) In the Source service menu, select Hyper Protect DBaaS for MongoDB.\n\n6) In the Target service menu, select Hyper Protect Crypto Services.\n   \n7) Enable the Reader role.\n\n8) Click Authorize.\n\n\n## **Hyper Protect DBaaS**\n\nIBM Cloud® Hyper Protect DBaaS (HPDBaaS) provides tamper-proof, enterprise cloud database environments with high availability for workloads with sensitive data. It offers a flexible platform that allows you to easily provision and manage your database of choice (MongoDB and PostgreSQL), without data security concerns.\nBuilt on IBM LinuxONE technology, Hyper Protect DBaaS for MongoDB helps you to alleviate data security and compliance concerns with built-in encryption and tamper protection for data at rest and in flight. You can deploy your workloads with sensitive data and build compliant applications without having to be a security expert.\nHyper Protect DBaaS for MongoDB provides a reliable environment that allows you to become more agile in application development. You can quickly get started and move your mission-critical data to the highly available and managed database clusters, saving time and costs on operations. You can also flexibly adjust the amount of resources to meet your requirements.\n\nYou can provision Hyper protect DBaaS for MongoDB using IBM cloud catalog or using terraform script mentioned below:\n\n<Tabs>\n\n<Tab label=\"Provision HPDBaaS for MongoDB using IBM cloud\" open=\"true\">\n\n![hpdbaas-1](images/hpdbaas-1.png)\n![hpdbaas-3](images/hpdbaas-3.png)\n\nFor security purpose, it is recomendded to have private endpoint.\n\nLocation and HPCS region should be same.\n\nFor more details please refer https://cloud.ibm.com/docs/hyper-protect-dbaas-for-mongodb?topic=hyper-protect-dbaas-for-mongodb-create-service\n\n</Tab>\n\n<Tab label=\"Provision HPDBaaS for MongoDB using terraform script\" open=\"true\">\n\n```\nInput parameters required:\n\napi key\n\nname of database admin\n\ncluster name\n\npassword.  —   15 characters minimum, at least one uppercase character, one lowercase character and one number\n\nconfirm password. —  15 characters minimum, at least one uppercase character, one lowercase character and one number\n\nHPCS name\n\nHPCS key\n\nHPCS region\n\nHPCS resources group\n\nname prefix\n\nplan\n\nresource group name \n\nresource location - This resource location and HPCS region should be same\n\n\n```\nBy default private_endpoint is true in terraform script.\n\n[Terraform module to provision Hyper protect DBaaS for MongoDB](https://github.com/yogendrasri/terraform-ibm-hpdbaas-mongodb)\n\n```\ngit clone https://github.com/yogendrasri/terraform-ibm-hpdbaas-mongodb.git\ncd terraform-ibm-hpdbaas-mongodb\n```\n\n```\ndocker run -it --rm -v ${PWD}:/terraform quay.io/ibmgaragecloud/cli-tools:v0.12.0-lite\n```\n\n```\ncd /terraform\nterraform init\n```\n\n```\nterraform plan\n```\n\n```\nterraform apply\n```\n\n</Tab>\n</Tabs>\n\n## **Hyper Protect Virtual Servers**\n\nIBM Cloud Hyper Protect Virtual Servers (HPVS) grant you complete authority over your Linux-based virtual servers for workloads that contain sensitive data and business IP. They offer a confidential computing environment, addressing your top security concerns for peace of mind when building applications in the cloud and helping you with the following issues:\n\n- Memory protection through a trusted execution environment\n- Data-at-rest and data-in-flight encryption\n- Prevention of unauthorized access\n\nYou can provision Hyper protect Virtual Servers using IBM cloud catalog or using terraform script mentioned below:\n\n<Tabs>\n\n<Tab label=\"Provision  HPVS using IBM cloud\" open=\"true\">\n\n![hpvs-1](images/hpvs-1.png)\n![hpvs-2](images/hpvs-2.png)\nFor generating SSH key Please refer https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-generate_ssh\n\nFor more details please refer https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-provision\n\n</Tab>\n<Tab label=\"Provision HPVS using terraform script\" open=\"true\">\n\n```\nInput parameters required:\n\napi key\n\nsshPublicKey  -- For generating SSH key Please refer https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-generate_ssh\n\nresource group name. \n\nname prefix \n\nresource location dal10, fra02, syd01\n\n```\n\n[Terraform module to provision Hyper protect Virtual Servers](https://github.com/yogendrasri/terraform-ibm-vpc-vsi)\n\n```\ngit clone https://github.com/yogendrasri/terraform-ibm-vpc-vsi.git\ncd terraform-ibm-vpc-vsi\n```\n\n```\ndocker run -it --rm -v ${PWD}:/terraform quay.io/ibmgaragecloud/cli-tools:v0.12.0-lite\n```\n\n```\ncd /terraform\nterraform init\n```\n\n```\nterraform plan\n```\n\n```\nterraform apply\n```\n</Tab>\n</Tabs>\n\n## **Deploy application on Hyper Protect Virtual Server**\n\nThis Code Pattern is a node.js application that allows for the creation of keys, one for each \"team\" or \"service. It uses that key to encrypt some customer data, ahead of being stored in the database. In this way, it demonstrates the above example, while showing how to use the Key Protect RESTful API provided by an instance of IBM Cloud Hyper Protect Crypto Services. IBM Cloud Hyper Protect DBaaS for MongoDB is used as the database as it provides a standard MongoDB managed service, encrypted to anyone outside of the organisation with legitimate access to it. The application runs in a Docker container, for example on a Mac or Linux laptop, or following the directions below, on IBM Cloud Hyper Protect Virtual Servers, for runtime protection in the public cloud.\n\nWhen you have completed this code pattern, you will understand how to:\n\n- Build and run a Docker container\n- Get environment variables in a node.js app, from Docker\n- Create an IBM Cloud IAM API key\n- Drive the IBM Cloud Key Protect REST API, offered by IBM Cloud Hyper Protect Crypto Services\n\n[Code pattern](https://developer.ibm.com/patterns/create-a-secured-microservices-and-deploy-it-to-a-consolidated-database/)\n\n\n### **Command to start application**\n\nUser can get HPCS parameters from HPCS service overview page.\n\nUser can get MongoDB parameters from HPDBBAS for MONGODB Service manage page.\n\nUser can get HPVS parameters like ip address from HPVS manage page.\n\nProvisioning of HPCS, HPDBBAS for MONGODB and HPVS is already done, user can start from the step Obtain an API Key provided in git repo mentioned below. \n\nYou can refer the this git repo for the source code of this Application:\nhttps://github.com/IBM/secured-microservices-writing-to-a-consolidated-database\n\n```\ndocker run -e IBM_API_KEY=‘<API KEY>’ \\\n           -e IAM_PATH='https://iam.cloud.ibm.com/identity/token' \\\n           -e MONGO_USER=‘<username>’ \\\n           -e MONGO_PASS=‘<password>’ \\\n           -e ROOT_KEY_ID=‘<HPCS root Key ID>’ \\\n           -e KP_URL=‘<HPCS PRIVATE URL>’ \\\n           -e KP_PATH='/api/v2/keys' \\\n           -e KP_INSTANCE=‘<HPCS Instance ID>’ \\\n           -e MONGO_ENDPOINTS=‘<mongodb URL:port,mongodb URL:port>’ \\\n           -e MONGO_CLUSTER_NAME=‘<mongodb cluster>’ \\\n           -e MONGO_DB_NAME=‘<Mongo DB name>’ \\\n           -dp 3000:3000 secure-microservice\n```\n\n### Application output\n\nThe main page of application that explains how HPCS, HPDBaaS works along with application deployed on HPVS:  \n![ui-frontpage](images/ui-frontpage.png)\n\nCreate a new team, and associated key provided by Crypto Services(HPCS):\n![ui-generatedek](images/ui-generatedek.png)\n\nFill the details and submit the form, user can use auto generated deatils as well:\n![ui-custsubmitform](images/ui-custsubmitform.png)\n\nConformation of Data stored in MongoDB:\n![ui-confirm](images/ui-confirm.png)\n\nRetrieve the information from MongoDB, all the data stored is encrypted:\n![ui-retrieveinfo](images/ui-retrieveinfo.png)\n\nYou can view encrpted data by selecting the row, provided user belongs to the same team: \n![ui-decryted-data](images/ui-decryted-data.png)\n\nIf user does not belongs to the same team data would be in ciphertext:\n![ui-encrypt-data](images/ui-encrypt-data.png)\n\n\n\n\n### **Resources**\n- [For more details about Hyper Protect crypto services](https://cloud.ibm.com/docs/hs-crypto?topic=hs-crypto-get-started)\n- [For more details about Hyper Protect DBaaS for MongoDB](https://cloud.ibm.com/docs/hyper-protect-dbaas-for-mongodb?topic=hyper-protect-dbaas-for-mongodb-gettingstarted)\n- [For more details about Hyper Protect Virtual Servers](https://cloud.ibm.com/docs/hp-virtual-servers?topic=hp-virtual-servers-getting-started)\n- [For more details about code pattern used to deploy in HPVS](https://developer.ibm.com/patterns/create-a-secured-microservices-and-deploy-it-to-a-consolidated-database/)\n","fileAbsolutePath":"/home/runner/work/ibm-enterprise-runbooks/ibm-enterprise-runbooks/src/pages/ibmcloud/hyper-protect-services/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","243517648","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","817386451"]}