{"componentChunkName":"component---src-pages-ibmcloud-openvpn-vsi-vpc-index-mdx","path":"/ibmcloud/openvpn-vsi-vpc/","result":{"pageContext":{"frontmatter":{"title":"Use OpenVPN to access virtual server instances running in a virtual private cloud"},"relativePagePath":"/ibmcloud/openvpn-vsi-vpc/index.mdx","titleType":"page","MdxNode":{"id":"17c2bbb3-e9ac-517b-b4ea-238e9e1d1a24","children":[],"parent":"8bafab21-2a85-53aa-a27c-1feb42715895","internal":{"content":"---\ntitle: Use OpenVPN to access virtual server instances running in a virtual private cloud\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\nVirtual Private Cloud (VPC) come with an additional layer of security as your workload can be completely hidden from the public Internet. But there are times when you will want to get into this private network. A common practice is to use a bastion host to jump into your VPC from your local machine as example. Another option is to install a VPN software inside your VPC to extend the secure VPC network to your local network.\nOpenVPN is a popular VPN software solution that can be easily installed on a server and offer a simple way to reach all the servers in your VPC from your local machine.\n\n</PageDescription>\n\n<Tabs>\n<Tab label=\"Terraform Setup\">\n\n## **Use OpenVPN to access virtual server instances running in a virtual private cloud**\n\n\nThis repo shows how to deploy OpenVPN inside a VPC using Terraform and Ansible.\n\n![openvpn.png](vpc-vsi.png) \n\n### **Clone the repository**\n    \nDownload the repository and navigate to project directory.\n   \n ```\n git clone https://github.com/l2fprod/ibmcloud-vpc-openvpn.git\n ```\n\n### **Deploy all resources**\n\n   1. Copy `terraform.tfvars.template` to `terraform.tfvars`.\n\n      ```sh\n         cp terraform.tfvars.template terraform.tfvars\n      ```\n   2. Edit `terraform.tfvars` to match your environment.\n\n   3. Use the [following Docker image](https://github.com/l2fprod/ibmcloud-ci) to run the deployment scripts. It has all required tools preinstalled.\n\n      * On Linux terminal:\n         ```\n            docker run -it --volume $PWD:/root/mnt/home --workdir /root/mnt/home l2fprod/ibmcloud-ci\n         ```\n\n      * On Windows command prompt:\n         ```\n            docker run -it --volume %CD%:/root/mnt/home --workdir /root/mnt/home l2fprod/ibmcloud-ci\n         ```\n\n      You can also try with your own environment. Prereqs are: tfswitch, terraform, ansible, ssh.\n\n   4. Run `tfswitch` to point to the right Terraform version for this solution:\n   ```\n      tfswitch\n   ```\n\n   5. Deploy all resources:\n\n   ```sh\n      terraform init\n      terraform apply\n   ```\n\n### **Install OpenVPN on the bastion**\n\n\n   1. Change to ansible directory:\n\n   ```\n      cd ansible\n   ```\n\n   2. Install ansible dependencies\n   ```\n      ansible-galaxy install -r requirements.yml\n   ```\n\n   3. To confirm ansible configuration, ping all hosts\n   ```\n      ansible all -m ping -i inventory -v\n   ```\n\n   4. Install OpenVPN on the bastion\n   ```\n      ansible-playbook -i inventory playbook-openvpn.yml\n   ```\n\n### **Connect to OpenVPN**\n\n To connect to the VPN, use _OpenVPN Connects_ with the configuration generated in `ansible/client-config/mymachine`.\n\n   - https://openvpn.net/client-connect-vpn-for-windows/\n      \n   - https://openvpn.net/client-connect-vpn-for-mac-os/\n\n    or from a command line\n    \n  ```\n   openvpn --setenv FORWARD_COMPATIBLE 1 --daemon --config ./client-config/mymachine/*-bastion.ovpn\n  ```\n\n   To view routes on macOS, use `netstat -nr`. On Linux and Windows `netstat -ar`.\n\n\n### **Test the OpenVPN connection**\n\n  - From the Docker container, ping one VPC server instance directly from your local machine.\n\n  ```\n  ping $(terraform output -json | jq -r '.instance_ips.value[0]')\n  ```\n\n   or a COS direct endpoint:\n\n   ```\n      ping s3.direct.us.cloud-object-storage.appdomain.cloud\n   ```\n\n or a service private endpoint:\n\n   ```\n      ping api.private.us-south.speech-to-text.watson.cloud.ibm.com\n   ```\n\n   If you stop the VPN connection, all these ping would fail.\n\n### **Destroy all configuration**\n\n   1. To destroy the environment, from the Docker container use:\n\n      ```sh\n         terraform destroy\n      ```\n\n\n</Tab>\n<Tab label=\"Manual Setup\">\n\n### **Solution Architecture:**\n\n![Solution Architecture](/images/solution-architecture.png)\n\n### **Solution Assumption:** \n\n- It is assumed that the IBM Cloud VPC Network is pre-configured.\n\n- It is assumed that the Transit Gateway has been configured with required connectivity\nbetween VPC infrastructure and Classic Infrastructure.\n\n- A CentOS server is provisioned with 4vCPU / 8GB Memory & 100GB Disk for\nconfiguring OpenVPN server. Hostname for this server is “nativeipvpnserver”.\n\n- We will be a leveraging two VPC one each from Dallas and Sydney multi-zone region.\n\n- Dallas VPC name “daltestvpc” & Sydeny VPC Name “demovpc1”.\n\n- Each zone in Dallas have been auto configured with following Subnet.\n\n    * AZ Dallas1 - 10.240.0.0/18.\n    * AZ Dallas2 - 10.240.64.0/18.\n    * AZ Dallas3 - 10.240.128.0/18.\n\n- Each zone in Sydney have been auto configured with following Subnet.\n\n    * AZ Sydney1 - 10.245.0.0/18.\n    * AZ Sydne2 - 10.245.64.0/18.\n    * AZ Sydney3 - 10.245.128.0/18.\n\n- A RedHat server have been configured under each AZ for validating network connectivity from user desktop to resources in each AZ.\n\n- A RedHat OS server have been configured under classic infrastructure in Dallas region for network connectivity validation.\n\n- There are two roles have been assumed for the exercise **Cloud Administrator** and **DevOps User**.\n\n- **Cloud Administrator** will be responsible for implementing OpenVPN Solution and **DevOps user** responsible for managing Applications which is running behind OpenVPN infrastructure.\n\n### **High-Level Implementation Steps:**\n\n   1. OpenVPN Solution Implementation.\n   2. IBM Cloud Security Group Configuration for OpenVPN Infrastructure.\n   3. Add new VPN User in OpenVPN server.\n   4. OpenVPN Client Setup & Connectivity Validation.\n\n### **OpenVPN Solution Implementation(Role : Cloud Administrator):**\n\n We will be using a CentOS VSI instance as OpenVPN server for this exercise.\n\n***Step 1:***\n\n Login to **to-be** OpenVPN server **nativeipvpnserver**.\n\n***Step 2:***\n\n Run `yum update -y` command to Update OS packages.\n\n ```\n yum update -y\n ```\n\n***Step 3:***\n\n Find out IP Address of OpenVPN server **nativeipvpnserver**. **ip a** gives interface private IP address for OpenVPN Server host.\n\n ![ipa](/images/ipa.png)\n\n***Step 4:***\n\n The OpenVPN Server host Public IP (Floating IP) address needs to be find from IBM Cloud Console.\n\n ![nativeipvpnserver](/images/nativeipvpnserver.png)\n\n***Step 5:***\n\n OpenVPN server “nativeipvpnserver” Private IP address (10.240.0.4) directly attached to server host and server is behind NAT (Floating IP) with public IP address (52.116.138.238).\n\n***Step 6:***\n\n Download OpenVPN server Management (Install/Config/Manage) script from following location `wget https://raw.githubusercontent.com/Angristan/openvpn- install/master/openvpn-install.sh -O centos7-vpn.sh` & change the permission of downloaded script “chmod +x centos7-vpn.sh\n\n ![vpnscript](/images/vpnscript.png)\n\n***Step 7:***\n\n Begin OpenVPN server installation by running “centos7-vpn.sh” script.\n\n ![hostname](/images/hostname.png)\n\n***Step 8:***\n\n Accent default private IP interface of OpenVPN server “nativeipvpnserver” where OpenVPN services will be listening.\n\n ![openvpnservice](/images/openvpnservice.png)\n\n***Step 9:***\n\n Accept NAT ip address which will act as public gateway IP for OpenVPN server.\n\n ![openvpnservice](/images/openvpnservice1.png)\n\n***Step 10:***\n\nDisable IPv6 support.\n\n![disableipv6](/images/disableipv6.png)\n\n***Step 11:***\n\nConfigure OpenVPN service port number & I would prefer running OpenVPN service with default port number.\n\n![openvpnportno](/images/openvpnportno.png)\n\n***Step 12:***\n\n Configure OpenVPN server port number.\n\n ![openvpnportno1](/images/openvpnportno1.png)\n\n***Step 13:***\n\n Configure DNS server settings for OpenVPN server.\n\n ![dns](/images/dns.png)\n\n***Step 14:***\n\n Disable compression & recommended to disable this configuration. Press “Enter” to complete OpenVPN Server installation .\n\n ![serverinstallation](/images/serverinstallation.png)\n\n***Step 15:***\n\n Configure your first OpenVPN client (Key file) & enter the name of the client. For this exercise I have chosen my first VPN user as “demovpnuser01” and press enter.\n\n ![demovpnuser01](/images/demovpnuser01.png)\n\n***Step 16:***\n\n Set a password phrase for VPN Client Key & OpenVPN keys stored under /root/demovpnuser01.ovpn.\n\n ![vpnclient](/images/vpnclient.png)\n\n***Step 17:***\n\n Enable OpenVPN server service.\n\n ```\n systemctl enable openvpn-server@server.service\n ```\n\n***Step 18:***\n\n Start OpenVPN service.\n\n ```\n systemctl start openvpn-server@server.service\n ```\n\n***Step 19:***\n\n Validate OpenVPN service status.\n\n ![statuscheck](/images/statuscheck.png)\n\n Now, we have successfully completed OpenVPN server installation.\n\n### **IBM Cloud Security Group Configuration for OpenVPN VSI (Role : Cloud Administrator):**\n\n\n***Step 1:***\n\n Create IBM Cloud security group with following Inbound / Outbound traffic\n\n   * Inbound on port number 1194.\n   * Outbound Traffic `All`\n\n***Step 2:***\n\n Login to IBM Cloud & `Create` new security group `openvpnsg`.\n\n ![security-group](/images/security-group.png)\n\n***Step 3:***\n\n Add new Inbound rule with OpenVPN Service port number 1194 as below.\n\n ![createsecuritygroup](/images/createsecuritygroup.png)\n\n***Step 4:***\n\n Create Outbound rule as blow.\n\n ![outbound](/images/outbound.png)\n\n***Step 5:***\n\n Allocate security `openvpnsg` to OpenVPN VSI hosts `nativeipvpnserver` network interface.\n\n ![openvpnsg](/images/openvpnsg.png)\n\n Now Security group have been successfully created and assigned to OpenVPN VSI hosts `nativeipvpnserver`.\n\n### **Add new VPN User in OpenVPN server (Role : Cloud Administrator):**\n\n In this section we will show you how to add a new users/Client to OpenVPN server.\n\n***Step 1:***\n\n Login to OpenVPN server VSI instance and execute **centos7-vpn.sh** script which was downloaded during **OpenVPN Server Setup** phase.\n\n ![serversetup1](/images/serversetup1.png)\n\n***Step 2:***\n\n From the menu select Option-1 to add new user and press enter.\n\n ![serversetup2](/images/serversetup2.png)\n\n***Step 3:***\n\n Enter the name of the client (user name) for new OpenVPN client key. In this example I am creating a user call `demouser02` & protect this Client key with a password.\n\n ![serversetup3](/images/serversetup3.png)\n\n***Step 4:***\n\n New client key `demouser02.ovpn` have been successfully created and stored under /root directory.\n\n ![serversetup4](/images/serversetup4.png)\n\n***Step 5:***\n\n This OVPN file needs to be shared with user for authenticating with VPN server for accessing resources in VPC and Classic infrastructure.\n\n\n### **Install OpenVPN Client & Authenticate to OpenVPN Server in IBM Cloud (Role : DevOps):**\n\n***Step 1:***\n\n Install OpnVPN client in user desktop. [OpenVPN client can be found](https://tunnelblick.net/).\n\n***Step 2:***\n\n Start OpenVPN Client (Tunnelblick). \n\n ![Tunnelblick](/images/Tunnelblick.png)\n\n **Note:** I am testing this from my MacBook\n\n***Step 3:***\n\n The OpenVPN Client window looks like below. \n\n ![clientwindow](/images/clientwindow.png)\n\n\n***Step 4:***\n\n Add VPN key from your desktop to OpenVPN client by `drag-drop` under `Configurations` tab. As soon as user drop the VPN key file under configuration tab, user will be prompted to share this key with `All users` or `Only Me` option. \n\n ![configurationwindow](/images/configurationwindow.png)\n\n***Step 5:***\n\n Once the OVPN key is successfully added to OpenSec VPN client and user should be getting following confirmation screen.\n\n ![configurationwindow1](/images/configurationwindow1.png)\n\n***Step 6:***\n\n VPN client is ready to authenticate with OpenVPN server. Select `Connect` button from above screen. Once VPN Client authenticate with OpenVPN server then the user should be able to see `Connected Success` message screen as below.\n\n ![configurationwindow2](/images/configurationwindow2.png)\n\n***Step 7:***\n\n Now user is successfully connected to OpenVPN server in IBM Cloud and user should be able to access the Server resources under VPC & Classic Infrastructure over Private IP. Lets quick validate the connectivity from DevOps user laptop\n\n***Step 8:***\n\n Below are the list of server available under various Subnets in VPC “daltestvpc” in Dallas MZR.\n\n ![daltestvpc](/images/daltestvpc.png)\n\n***Step 9:***\n\n Lets Ping the IP Address of the servers in Dallas VPC.\n\n ![daltestvpc1](/images/daltestvpc1.png)\n\n***Step 10:***\n\n Bello are the list of Devices available under Classic Infra Network & lets quickly validate network connectivity to this thru VPN tunnel using **ping** command..\n\n ![daltestvpc2](/images/daltestvpc2.png)\n\n\n  We have successfully Setup OpenVPN infrastructure for Accessing VPC & Classic Infrastructure resources.\n\n</Tab>\n</Tabs>\n\n","type":"Mdx","contentDigest":"1c9aa6fef915eb06bc9b53a211a31e84","owner":"gatsby-plugin-mdx","counter":904},"frontmatter":{"title":"Use OpenVPN to access virtual server instances running in a virtual private cloud"},"exports":{},"rawBody":"---\ntitle: Use OpenVPN to access virtual server instances running in a virtual private cloud\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\nVirtual Private Cloud (VPC) come with an additional layer of security as your workload can be completely hidden from the public Internet. But there are times when you will want to get into this private network. A common practice is to use a bastion host to jump into your VPC from your local machine as example. Another option is to install a VPN software inside your VPC to extend the secure VPC network to your local network.\nOpenVPN is a popular VPN software solution that can be easily installed on a server and offer a simple way to reach all the servers in your VPC from your local machine.\n\n</PageDescription>\n\n<Tabs>\n<Tab label=\"Terraform Setup\">\n\n## **Use OpenVPN to access virtual server instances running in a virtual private cloud**\n\n\nThis repo shows how to deploy OpenVPN inside a VPC using Terraform and Ansible.\n\n![openvpn.png](vpc-vsi.png) \n\n### **Clone the repository**\n    \nDownload the repository and navigate to project directory.\n   \n ```\n git clone https://github.com/l2fprod/ibmcloud-vpc-openvpn.git\n ```\n\n### **Deploy all resources**\n\n   1. Copy `terraform.tfvars.template` to `terraform.tfvars`.\n\n      ```sh\n         cp terraform.tfvars.template terraform.tfvars\n      ```\n   2. Edit `terraform.tfvars` to match your environment.\n\n   3. Use the [following Docker image](https://github.com/l2fprod/ibmcloud-ci) to run the deployment scripts. It has all required tools preinstalled.\n\n      * On Linux terminal:\n         ```\n            docker run -it --volume $PWD:/root/mnt/home --workdir /root/mnt/home l2fprod/ibmcloud-ci\n         ```\n\n      * On Windows command prompt:\n         ```\n            docker run -it --volume %CD%:/root/mnt/home --workdir /root/mnt/home l2fprod/ibmcloud-ci\n         ```\n\n      You can also try with your own environment. Prereqs are: tfswitch, terraform, ansible, ssh.\n\n   4. Run `tfswitch` to point to the right Terraform version for this solution:\n   ```\n      tfswitch\n   ```\n\n   5. Deploy all resources:\n\n   ```sh\n      terraform init\n      terraform apply\n   ```\n\n### **Install OpenVPN on the bastion**\n\n\n   1. Change to ansible directory:\n\n   ```\n      cd ansible\n   ```\n\n   2. Install ansible dependencies\n   ```\n      ansible-galaxy install -r requirements.yml\n   ```\n\n   3. To confirm ansible configuration, ping all hosts\n   ```\n      ansible all -m ping -i inventory -v\n   ```\n\n   4. Install OpenVPN on the bastion\n   ```\n      ansible-playbook -i inventory playbook-openvpn.yml\n   ```\n\n### **Connect to OpenVPN**\n\n To connect to the VPN, use _OpenVPN Connects_ with the configuration generated in `ansible/client-config/mymachine`.\n\n   - https://openvpn.net/client-connect-vpn-for-windows/\n      \n   - https://openvpn.net/client-connect-vpn-for-mac-os/\n\n    or from a command line\n    \n  ```\n   openvpn --setenv FORWARD_COMPATIBLE 1 --daemon --config ./client-config/mymachine/*-bastion.ovpn\n  ```\n\n   To view routes on macOS, use `netstat -nr`. On Linux and Windows `netstat -ar`.\n\n\n### **Test the OpenVPN connection**\n\n  - From the Docker container, ping one VPC server instance directly from your local machine.\n\n  ```\n  ping $(terraform output -json | jq -r '.instance_ips.value[0]')\n  ```\n\n   or a COS direct endpoint:\n\n   ```\n      ping s3.direct.us.cloud-object-storage.appdomain.cloud\n   ```\n\n or a service private endpoint:\n\n   ```\n      ping api.private.us-south.speech-to-text.watson.cloud.ibm.com\n   ```\n\n   If you stop the VPN connection, all these ping would fail.\n\n### **Destroy all configuration**\n\n   1. To destroy the environment, from the Docker container use:\n\n      ```sh\n         terraform destroy\n      ```\n\n\n</Tab>\n<Tab label=\"Manual Setup\">\n\n### **Solution Architecture:**\n\n![Solution Architecture](/images/solution-architecture.png)\n\n### **Solution Assumption:** \n\n- It is assumed that the IBM Cloud VPC Network is pre-configured.\n\n- It is assumed that the Transit Gateway has been configured with required connectivity\nbetween VPC infrastructure and Classic Infrastructure.\n\n- A CentOS server is provisioned with 4vCPU / 8GB Memory & 100GB Disk for\nconfiguring OpenVPN server. Hostname for this server is “nativeipvpnserver”.\n\n- We will be a leveraging two VPC one each from Dallas and Sydney multi-zone region.\n\n- Dallas VPC name “daltestvpc” & Sydeny VPC Name “demovpc1”.\n\n- Each zone in Dallas have been auto configured with following Subnet.\n\n    * AZ Dallas1 - 10.240.0.0/18.\n    * AZ Dallas2 - 10.240.64.0/18.\n    * AZ Dallas3 - 10.240.128.0/18.\n\n- Each zone in Sydney have been auto configured with following Subnet.\n\n    * AZ Sydney1 - 10.245.0.0/18.\n    * AZ Sydne2 - 10.245.64.0/18.\n    * AZ Sydney3 - 10.245.128.0/18.\n\n- A RedHat server have been configured under each AZ for validating network connectivity from user desktop to resources in each AZ.\n\n- A RedHat OS server have been configured under classic infrastructure in Dallas region for network connectivity validation.\n\n- There are two roles have been assumed for the exercise **Cloud Administrator** and **DevOps User**.\n\n- **Cloud Administrator** will be responsible for implementing OpenVPN Solution and **DevOps user** responsible for managing Applications which is running behind OpenVPN infrastructure.\n\n### **High-Level Implementation Steps:**\n\n   1. OpenVPN Solution Implementation.\n   2. IBM Cloud Security Group Configuration for OpenVPN Infrastructure.\n   3. Add new VPN User in OpenVPN server.\n   4. OpenVPN Client Setup & Connectivity Validation.\n\n### **OpenVPN Solution Implementation(Role : Cloud Administrator):**\n\n We will be using a CentOS VSI instance as OpenVPN server for this exercise.\n\n***Step 1:***\n\n Login to **to-be** OpenVPN server **nativeipvpnserver**.\n\n***Step 2:***\n\n Run `yum update -y` command to Update OS packages.\n\n ```\n yum update -y\n ```\n\n***Step 3:***\n\n Find out IP Address of OpenVPN server **nativeipvpnserver**. **ip a** gives interface private IP address for OpenVPN Server host.\n\n ![ipa](/images/ipa.png)\n\n***Step 4:***\n\n The OpenVPN Server host Public IP (Floating IP) address needs to be find from IBM Cloud Console.\n\n ![nativeipvpnserver](/images/nativeipvpnserver.png)\n\n***Step 5:***\n\n OpenVPN server “nativeipvpnserver” Private IP address (10.240.0.4) directly attached to server host and server is behind NAT (Floating IP) with public IP address (52.116.138.238).\n\n***Step 6:***\n\n Download OpenVPN server Management (Install/Config/Manage) script from following location `wget https://raw.githubusercontent.com/Angristan/openvpn- install/master/openvpn-install.sh -O centos7-vpn.sh` & change the permission of downloaded script “chmod +x centos7-vpn.sh\n\n ![vpnscript](/images/vpnscript.png)\n\n***Step 7:***\n\n Begin OpenVPN server installation by running “centos7-vpn.sh” script.\n\n ![hostname](/images/hostname.png)\n\n***Step 8:***\n\n Accent default private IP interface of OpenVPN server “nativeipvpnserver” where OpenVPN services will be listening.\n\n ![openvpnservice](/images/openvpnservice.png)\n\n***Step 9:***\n\n Accept NAT ip address which will act as public gateway IP for OpenVPN server.\n\n ![openvpnservice](/images/openvpnservice1.png)\n\n***Step 10:***\n\nDisable IPv6 support.\n\n![disableipv6](/images/disableipv6.png)\n\n***Step 11:***\n\nConfigure OpenVPN service port number & I would prefer running OpenVPN service with default port number.\n\n![openvpnportno](/images/openvpnportno.png)\n\n***Step 12:***\n\n Configure OpenVPN server port number.\n\n ![openvpnportno1](/images/openvpnportno1.png)\n\n***Step 13:***\n\n Configure DNS server settings for OpenVPN server.\n\n ![dns](/images/dns.png)\n\n***Step 14:***\n\n Disable compression & recommended to disable this configuration. Press “Enter” to complete OpenVPN Server installation .\n\n ![serverinstallation](/images/serverinstallation.png)\n\n***Step 15:***\n\n Configure your first OpenVPN client (Key file) & enter the name of the client. For this exercise I have chosen my first VPN user as “demovpnuser01” and press enter.\n\n ![demovpnuser01](/images/demovpnuser01.png)\n\n***Step 16:***\n\n Set a password phrase for VPN Client Key & OpenVPN keys stored under /root/demovpnuser01.ovpn.\n\n ![vpnclient](/images/vpnclient.png)\n\n***Step 17:***\n\n Enable OpenVPN server service.\n\n ```\n systemctl enable openvpn-server@server.service\n ```\n\n***Step 18:***\n\n Start OpenVPN service.\n\n ```\n systemctl start openvpn-server@server.service\n ```\n\n***Step 19:***\n\n Validate OpenVPN service status.\n\n ![statuscheck](/images/statuscheck.png)\n\n Now, we have successfully completed OpenVPN server installation.\n\n### **IBM Cloud Security Group Configuration for OpenVPN VSI (Role : Cloud Administrator):**\n\n\n***Step 1:***\n\n Create IBM Cloud security group with following Inbound / Outbound traffic\n\n   * Inbound on port number 1194.\n   * Outbound Traffic `All`\n\n***Step 2:***\n\n Login to IBM Cloud & `Create` new security group `openvpnsg`.\n\n ![security-group](/images/security-group.png)\n\n***Step 3:***\n\n Add new Inbound rule with OpenVPN Service port number 1194 as below.\n\n ![createsecuritygroup](/images/createsecuritygroup.png)\n\n***Step 4:***\n\n Create Outbound rule as blow.\n\n ![outbound](/images/outbound.png)\n\n***Step 5:***\n\n Allocate security `openvpnsg` to OpenVPN VSI hosts `nativeipvpnserver` network interface.\n\n ![openvpnsg](/images/openvpnsg.png)\n\n Now Security group have been successfully created and assigned to OpenVPN VSI hosts `nativeipvpnserver`.\n\n### **Add new VPN User in OpenVPN server (Role : Cloud Administrator):**\n\n In this section we will show you how to add a new users/Client to OpenVPN server.\n\n***Step 1:***\n\n Login to OpenVPN server VSI instance and execute **centos7-vpn.sh** script which was downloaded during **OpenVPN Server Setup** phase.\n\n ![serversetup1](/images/serversetup1.png)\n\n***Step 2:***\n\n From the menu select Option-1 to add new user and press enter.\n\n ![serversetup2](/images/serversetup2.png)\n\n***Step 3:***\n\n Enter the name of the client (user name) for new OpenVPN client key. In this example I am creating a user call `demouser02` & protect this Client key with a password.\n\n ![serversetup3](/images/serversetup3.png)\n\n***Step 4:***\n\n New client key `demouser02.ovpn` have been successfully created and stored under /root directory.\n\n ![serversetup4](/images/serversetup4.png)\n\n***Step 5:***\n\n This OVPN file needs to be shared with user for authenticating with VPN server for accessing resources in VPC and Classic infrastructure.\n\n\n### **Install OpenVPN Client & Authenticate to OpenVPN Server in IBM Cloud (Role : DevOps):**\n\n***Step 1:***\n\n Install OpnVPN client in user desktop. [OpenVPN client can be found](https://tunnelblick.net/).\n\n***Step 2:***\n\n Start OpenVPN Client (Tunnelblick). \n\n ![Tunnelblick](/images/Tunnelblick.png)\n\n **Note:** I am testing this from my MacBook\n\n***Step 3:***\n\n The OpenVPN Client window looks like below. \n\n ![clientwindow](/images/clientwindow.png)\n\n\n***Step 4:***\n\n Add VPN key from your desktop to OpenVPN client by `drag-drop` under `Configurations` tab. As soon as user drop the VPN key file under configuration tab, user will be prompted to share this key with `All users` or `Only Me` option. \n\n ![configurationwindow](/images/configurationwindow.png)\n\n***Step 5:***\n\n Once the OVPN key is successfully added to OpenSec VPN client and user should be getting following confirmation screen.\n\n ![configurationwindow1](/images/configurationwindow1.png)\n\n***Step 6:***\n\n VPN client is ready to authenticate with OpenVPN server. Select `Connect` button from above screen. Once VPN Client authenticate with OpenVPN server then the user should be able to see `Connected Success` message screen as below.\n\n ![configurationwindow2](/images/configurationwindow2.png)\n\n***Step 7:***\n\n Now user is successfully connected to OpenVPN server in IBM Cloud and user should be able to access the Server resources under VPC & Classic Infrastructure over Private IP. Lets quick validate the connectivity from DevOps user laptop\n\n***Step 8:***\n\n Below are the list of server available under various Subnets in VPC “daltestvpc” in Dallas MZR.\n\n ![daltestvpc](/images/daltestvpc.png)\n\n***Step 9:***\n\n Lets Ping the IP Address of the servers in Dallas VPC.\n\n ![daltestvpc1](/images/daltestvpc1.png)\n\n***Step 10:***\n\n Bello are the list of Devices available under Classic Infra Network & lets quickly validate network connectivity to this thru VPN tunnel using **ping** command..\n\n ![daltestvpc2](/images/daltestvpc2.png)\n\n\n  We have successfully Setup OpenVPN infrastructure for Accessing VPC & Classic Infrastructure resources.\n\n</Tab>\n</Tabs>\n\n","fileAbsolutePath":"/home/runner/work/ibm-enterprise-runbooks/ibm-enterprise-runbooks/src/pages/ibmcloud/openvpn-vsi-vpc/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","243517648","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","817386451"]}