{"componentChunkName":"component---src-pages-redhat-backup-restore-index-mdx","path":"/redhat/backup-restore/","result":{"pageContext":{"frontmatter":{"title":"Backup and Restore"},"relativePagePath":"/redhat/backup-restore/index.mdx","titleType":"page","MdxNode":{"id":"78ebfd75-d168-50c2-b01d-1f63f9e1628f","children":[],"parent":"7a563a8d-3cc7-59b7-9f34-a8ccf3f93fde","internal":{"content":"---\ntitle: Backup and Restore\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n\n</PageDescription>\n\n\n\n\n## **OpenShift Backup and Restore**\n\nAs an administrator, you might need to follow one or more of the following procedures in order to return your cluster to a working state after several disaster situations, that that might occur with their OpenShift Container Platform cluster such as:\n- Someone accidentally deleted a namespace\n- Kubernetes API upgrade failed and you need to revert back\n- Network went down.\n- Cluster goes into an unrecoverable state\n- Latest application push introduced a critical bug that wiped a persistent volume and you lost the data.\n- Rare case of a natural disaster making your cluster inaccessible.\n\nVelero gives you tools to back up and restore your OpenShift cluster resources and persistent volumes.You can run Velero with a cloud provider or on-premises. Velero lets you:\n- Take backups of your cluster and restore in case of loss.\n- Migrate cluster resources to other clusters.\n- Replicate your production cluster to development and testing clusters.\n\nVelero consists of:\n\n- A server that runs on your cluster\n- A command-line client that runs locally\n\nVelero requires the storage destination to store backup, in the below document we are describing two storage destinations:\n- IBM Cloud Object Storage\n- Minio  \n\n\n<Tabs>\n\n<Tab label=\"IBM Cloud Object Store\" open=\"true\">\n\nIn this example we are going to demonstrate Velero with IBM Cloud Object Storage as object storage.\n\n### Clone the Velero repository\n\n```\ngit clone https://github.com/vmware-tanzu/velero.git\n\n```\n\n### Create credential file\n\nNext, we need to create the Minio credential file. So create a file named credentials-velero with the following content:\n\n```\n[default]\naws_access_key_id = <access-key-id>\naws_secret_access_key = <secret-access-key>\n```\n### Create an IBM Cloud Object Storage(COS) Service Instance\n\nIf you don’t have a COS instance, you can create a new one.\n\nThe next step is to create a bucket for your backups. Velero will use the same bucket to store K8S configuration data as well as Volume backups. See instructions in Create a bucket to store your data. We are naming the bucket backup-ocp and will use this name later to configure velero backup location. You will need to choose another name for your bucket as IBM COS bucket names are globally unique. Choose “Cross Region” Resiliency so it is easy to restore anywhere.\n\n### Create a custom bucket with following configuration:\n\n![Bucket Details](/images/bucket-details.png)\n\nThe last step in the COS configuration is to define a service that can store data in the bucket. The process of creating service credentials is described in Service credentials. Several comments:\nYour Velero service will write its backup into the bucket, so it requires the “Writer” access role.\n\nVelero uses an AWS S3 compatible API. Which means it authenticates using a signature created from a pair of access and secret keys — a set of HMAC credentials. You can create these HMAC credentials by specifying {“HMAC”:true} as an optional inline parameter. See step 3 in the Service credentials guide.\n\n![Create Credentials](/images/create-credentials.png)\n\nAfter successfully creating a Service credential, you can view the JSON definition of the credential. Under the cos_hmac_keys entry there are access_key_id and secret_access_key. We will use them later.\n\n\n![Credentials ](/images/credentials.png)\n\n\nNow you can copy s3 URL(Direct) from the region you created bucket, we will use this url while installing velero\n\n![S3 URL](/images/s3-url.png)\n\ncreate a project velero in openshift\n```\noc new-project velero\n```\n\n### Install Velero\n\nWe are finally ready to install Velero. Run the following command:\n```\nvelero install \\\n    --provider aws \\\n    --plugins velero/velero-plugin-for-aws:v1.0.0 \\\n    --bucket backup-ocp \\\n    --secret-file ./credentials-velero \\\n    --use-volume-snapshots=true \\\n    --backup-location-config region=us-geo,s3ForcePathStyle=\"true\",s3Url=http://s3.direct.us.cloud-object-storage.appdomain.cloud\n```\n\nAnd you should see the following output:\n\n```\nCustomResourceDefinition/backups.velero.io: attempting to create resource\nCustomResourceDefinition/backups.velero.io: already exists, proceeding\nCustomResourceDefinition/backups.velero.io: created\nCustomResourceDefinition/backupstoragelocations.velero.io: attempting to create resource\nCustomResourceDefinition/backupstoragelocations.velero.io: already exists, proceeding\nCustomResourceDefinition/backupstoragelocations.velero.io: created\nCustomResourceDefinition/deletebackuprequests.velero.io: attempting to create resource\nCustomResourceDefinition/deletebackuprequests.velero.io: already exists, proceeding\nCustomResourceDefinition/deletebackuprequests.velero.io: created\nCustomResourceDefinition/downloadrequests.velero.io: attempting to create resource\nCustomResourceDefinition/downloadrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/downloadrequests.velero.io: created\nCustomResourceDefinition/podvolumebackups.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumebackups.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumebackups.velero.io: created\nCustomResourceDefinition/podvolumerestores.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumerestores.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumerestores.velero.io: created\nCustomResourceDefinition/resticrepositories.velero.io: attempting to create resource\nCustomResourceDefinition/resticrepositories.velero.io: already exists, proceeding\nCustomResourceDefinition/resticrepositories.velero.io: created\nCustomResourceDefinition/restores.velero.io: attempting to create resource\nCustomResourceDefinition/restores.velero.io: already exists, proceeding\nCustomResourceDefinition/restores.velero.io: created\nCustomResourceDefinition/schedules.velero.io: attempting to create resource\nCustomResourceDefinition/schedules.velero.io: already exists, proceeding\nCustomResourceDefinition/schedules.velero.io: created\nCustomResourceDefinition/serverstatusrequests.velero.io: attempting to create resource\nCustomResourceDefinition/serverstatusrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/serverstatusrequests.velero.io: created\nCustomResourceDefinition/volumesnapshotlocations.velero.io: attempting to create resource\nCustomResourceDefinition/volumesnapshotlocations.velero.io: already exists, proceeding\nCustomResourceDefinition/volumesnapshotlocations.velero.io: created\nWaiting for resources to be ready in cluster...\nNamespace/velero: attempting to create resource\nNamespace/velero: already exists, proceeding\nNamespace/velero: created\nClusterRoleBinding/velero: attempting to create resource\nClusterRoleBinding/velero: already exists, proceeding\nClusterRoleBinding/velero: created\nServiceAccount/velero: attempting to create resource\nServiceAccount/velero: created\nSecret/cloud-credentials: attempting to create resource\nSecret/cloud-credentials: created\nBackupStorageLocation/default: attempting to create resource\nBackupStorageLocation/default: created\nVolumeSnapshotLocation/default: attempting to create resource\nVolumeSnapshotLocation/default: created\nDeployment/velero: attempting to create resource\nDeployment/velero: created\nVelero is installed! ⛵ Use 'kubectl logs deployment/velero -n velero' to view the status.\n```\nNow, we need to test it. Create some Kubernetes resources\n\nTo test the backup procedure, let’s first create some Kubernetes resources. It doesn’t matter which resource, so I will stick to a simple one: ConfigMap. Run the following script to create an OpenShift project and many ConfigMaps:\n\n```\noc new-project test-backup\nfor i in {1..20}; do echo Creating ConfigMap $i; oc create configmap cm-$i --from-literal=\"key=$i\"; done\n```\nThe lines above create a new project and 20 ConfigMaps. Run the following command to confirm\n\n### Back up OpenShift\n\nNow, we can test the backup procedure. For simplicity, we are going to back up only the test-backup project, but the same concept applies to any (or all) projects. Run the following command:\n```\nvelero backup create my-backup --include-namespaces test-backup\n```\nYou will get following output:\n```\nBackup request \"my-backup\" submitted successfully.\nRun `velero backup describe my-backup` or `velero backup logs my-backup0` for more details.\n```\nAfter a few seconds, you can check the backup has completed:\n\n```\noc get backup -n velero my-backup -o jsonpath='{.status.phase}'\n```\nNow delete these configmaps: \n```\noc delete configmap cm-{1..20}\n```\n\n### Restoring the environment\n\nLet’s now restore the backup that Velero created:\n```\nvelero restore create --from-backup my-backup\n```\nYou will get following output:\n```\nRestore request \"my-backup-20201106170117\" submitted successfully.\nRun `velero restore describe my-backup-20201106170117` or `velero restore logs my-backup-20201106170117` for more details.\n```\nYou can validate by running the following command:\n```\noc get configmap\n```\nIt should return no configmap:\n```\no resources found in test-backup namespace\n```\n\n</Tab>\n\n<Tab label=\"Minio\" open=\"false\">\n\nIn this example we are going to demonstrate Velero with Minio as object storage.\n\n### Clone the Velero repository\n\n```\ngit clone https://github.com/vmware-tanzu/velero.git\n```\n### create a project velero in openshift\n\n```\noc new-project velero\n```\n\n### Install MinIO\n```\ncd velero\noc apply -f examples/minio/00-minio-deployment.yaml\n```\n\nAnd you should see the output like this:\n```\nnamespace/velero created\ndeployment.apps/minio created\nservice/minio created\njob.batch/minio-setup created\n```\n### Expose MinIO\n\nNow, we need to expose the MinIO service outside the cluster, so that the velero CLI can interact with it. In OpenShift, this is pretty simple:\n```\noc project velero\noc expose svc minio\n```\nYou should see the following output:\n```\nroute.route.openshift.io/minio exposed\n```\n\nYou can get the information about the route by running the following command:\n```\noc get route minio\n```\nYou should be able to open the URL listed there and log in using user: minio and password: minio123\nInstall Velero CLI\n\nNext, we need to install the Velero CLI in the local machine. For Mac, run the following command:\n```\nbrew install velero\n```\n\n### Create credential file\n\nNext, we need to create the Minio credential file. So create a file named credentials-velero with the following content:\n\n```\n[default]\naws_access_key_id = minio\naws_secret_access_key = minio123\n```\n### Install Velero\n\nWe are finally ready to install Velero. Run the following command:\n```\nvelero install \\\n    --provider aws \\\n    --plugins velero/velero-plugin-for-aws:v1.0.0 \\\n    --bucket velero \\\n    --secret-file ./credentials-velero \\\n    --use-volume-snapshots=false \\\n    --backup-location-config region=minio,s3ForcePathStyle=\"true\",s3Url=http://minio.velero.svc:9000\n```\n\nAnd you should see the following output:\n```\nCustomResourceDefinition/backups.velero.io: attempting to create resource\nCustomResourceDefinition/backups.velero.io: already exists, proceeding\nCustomResourceDefinition/backups.velero.io: created\nCustomResourceDefinition/backupstoragelocations.velero.io: attempting to create resource\nCustomResourceDefinition/backupstoragelocations.velero.io: already exists, proceeding\nCustomResourceDefinition/backupstoragelocations.velero.io: created\nCustomResourceDefinition/deletebackuprequests.velero.io: attempting to create resource\nCustomResourceDefinition/deletebackuprequests.velero.io: already exists, proceeding\nCustomResourceDefinition/deletebackuprequests.velero.io: created\nCustomResourceDefinition/downloadrequests.velero.io: attempting to create resource\nCustomResourceDefinition/downloadrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/downloadrequests.velero.io: created\nCustomResourceDefinition/podvolumebackups.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumebackups.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumebackups.velero.io: created\nCustomResourceDefinition/podvolumerestores.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumerestores.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumerestores.velero.io: created\nCustomResourceDefinition/resticrepositories.velero.io: attempting to create resource\nCustomResourceDefinition/resticrepositories.velero.io: already exists, proceeding\nCustomResourceDefinition/resticrepositories.velero.io: created\nCustomResourceDefinition/restores.velero.io: attempting to create resource\nCustomResourceDefinition/restores.velero.io: already exists, proceeding\nCustomResourceDefinition/restores.velero.io: created\nCustomResourceDefinition/schedules.velero.io: attempting to create resource\nCustomResourceDefinition/schedules.velero.io: already exists, proceeding\nCustomResourceDefinition/schedules.velero.io: created\nCustomResourceDefinition/serverstatusrequests.velero.io: attempting to create resource\nCustomResourceDefinition/serverstatusrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/serverstatusrequests.velero.io: created\nCustomResourceDefinition/volumesnapshotlocations.velero.io: attempting to create resource\nCustomResourceDefinition/volumesnapshotlocations.velero.io: already exists, proceeding\nCustomResourceDefinition/volumesnapshotlocations.velero.io: created\nWaiting for resources to be ready in cluster...\nNamespace/velero: attempting to create resource\nNamespace/velero: already exists, proceeding\nNamespace/velero: created\nClusterRoleBinding/velero: attempting to create resource\nClusterRoleBinding/velero: already exists, proceeding\nClusterRoleBinding/velero: created\nServiceAccount/velero: attempting to create resource\nServiceAccount/velero: created\nSecret/cloud-credentials: attempting to create resource\nSecret/cloud-credentials: created\nBackupStorageLocation/default: attempting to create resource\nBackupStorageLocation/default: created\nDeployment/velero: attempting to create resource\nDeployment/velero: created\nVelero is installed! ⛵ Use 'kubectl logs deployment/velero -n velero' to view the status.\n```\n\nNow, we need to test it.\nCreate some Kubernetes resources\n\nTo test the backup procedure, let’s first create some Kubernetes resources. It doesn’t matter which resource, so I will stick to a simple one: ConfigMap. Run the following script to create an OpenShift project and many ConfigMaps:\n```\noc new-project test-backup\nfor i in {1..20}; do echo Creating ConfigMap $i; oc create configmap cm-$i --from-literal=\"key=$i\"; done\n```\nThe lines above create a new project and 20 ConfigMaps. Run the following command to confirm:\n```\noc get configmap\n```\n\n### Back up OpenShift\n\nNow, we can test the backup procedure. For simplicity, we are going to back up only the test-backup project, but the same concept applies to any (or all) projects. Run the following command:\n```\nvelero backup create my-backup --include-namespaces test-backup\n```\nand you will see the following output:\n```\nBackup request \"my-backup\" submitted successfully.\nRun `velero backup describe my-backup` or `velero backup logs my-backup` for more details.\n```\nAfter a few seconds, you can check the backup has completed:\n```\nvelero backup describe my-backup\n```\nnow delete these configmaps: \n```\noc delete configmap cm-{1..20}\n```\nYou can validate by running the following command:\n```\noc get configmap\n```\nIt should return no configmap:\n```\no resources found in test-backup namespace\n```\n\n### Restoring the environment\n\nLet’s now restore the backup that Velero created:\n\n```\nvelero restore create --from-backup my-backup\n```\nyou will see the following output:\n```\nRestore request \"my-backup-20201022164948\" submitted successfully.\nRun `velero restore describe my-backup-20201022164948` or `velero restore logs my-backup-20201022164948` for more details.\n```\nNow, we can check the result:\n```\noc get cm\n```\nAnd you should see the 20 ConfigMaps restored.\n\n</Tab>\n</Tabs>\n\n\n\nRefrences:\n- https://medium.com/ibm-garage/how-to-install-velero-in-an-openshift-environment-f7484fabbbe4\n- https://medium.com/@mlrborowski/using-ark-and-restic-to-provide-dr-for-ibm-kubernetes-service-cae53cfe532\n- https://velero.io/docs/v1.5/contributions/ibm-config/#docs\n- https://blog.kubernauts.io/backup-and-restore-of-kubernetes-applications-using-heptios-velero-with-restic-and-rook-ceph-as-2e8df15b1487\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"2486a91e37d62868318618065851cb56","counter":982,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Backup and Restore"},"exports":{},"rawBody":"---\ntitle: Backup and Restore\n---\n\nimport Globals from 'gatsby-theme-carbon/src/templates/Globals';\n\n<PageDescription>\n\n\n</PageDescription>\n\n\n\n\n## **OpenShift Backup and Restore**\n\nAs an administrator, you might need to follow one or more of the following procedures in order to return your cluster to a working state after several disaster situations, that that might occur with their OpenShift Container Platform cluster such as:\n- Someone accidentally deleted a namespace\n- Kubernetes API upgrade failed and you need to revert back\n- Network went down.\n- Cluster goes into an unrecoverable state\n- Latest application push introduced a critical bug that wiped a persistent volume and you lost the data.\n- Rare case of a natural disaster making your cluster inaccessible.\n\nVelero gives you tools to back up and restore your OpenShift cluster resources and persistent volumes.You can run Velero with a cloud provider or on-premises. Velero lets you:\n- Take backups of your cluster and restore in case of loss.\n- Migrate cluster resources to other clusters.\n- Replicate your production cluster to development and testing clusters.\n\nVelero consists of:\n\n- A server that runs on your cluster\n- A command-line client that runs locally\n\nVelero requires the storage destination to store backup, in the below document we are describing two storage destinations:\n- IBM Cloud Object Storage\n- Minio  \n\n\n<Tabs>\n\n<Tab label=\"IBM Cloud Object Store\" open=\"true\">\n\nIn this example we are going to demonstrate Velero with IBM Cloud Object Storage as object storage.\n\n### Clone the Velero repository\n\n```\ngit clone https://github.com/vmware-tanzu/velero.git\n\n```\n\n### Create credential file\n\nNext, we need to create the Minio credential file. So create a file named credentials-velero with the following content:\n\n```\n[default]\naws_access_key_id = <access-key-id>\naws_secret_access_key = <secret-access-key>\n```\n### Create an IBM Cloud Object Storage(COS) Service Instance\n\nIf you don’t have a COS instance, you can create a new one.\n\nThe next step is to create a bucket for your backups. Velero will use the same bucket to store K8S configuration data as well as Volume backups. See instructions in Create a bucket to store your data. We are naming the bucket backup-ocp and will use this name later to configure velero backup location. You will need to choose another name for your bucket as IBM COS bucket names are globally unique. Choose “Cross Region” Resiliency so it is easy to restore anywhere.\n\n### Create a custom bucket with following configuration:\n\n![Bucket Details](/images/bucket-details.png)\n\nThe last step in the COS configuration is to define a service that can store data in the bucket. The process of creating service credentials is described in Service credentials. Several comments:\nYour Velero service will write its backup into the bucket, so it requires the “Writer” access role.\n\nVelero uses an AWS S3 compatible API. Which means it authenticates using a signature created from a pair of access and secret keys — a set of HMAC credentials. You can create these HMAC credentials by specifying {“HMAC”:true} as an optional inline parameter. See step 3 in the Service credentials guide.\n\n![Create Credentials](/images/create-credentials.png)\n\nAfter successfully creating a Service credential, you can view the JSON definition of the credential. Under the cos_hmac_keys entry there are access_key_id and secret_access_key. We will use them later.\n\n\n![Credentials ](/images/credentials.png)\n\n\nNow you can copy s3 URL(Direct) from the region you created bucket, we will use this url while installing velero\n\n![S3 URL](/images/s3-url.png)\n\ncreate a project velero in openshift\n```\noc new-project velero\n```\n\n### Install Velero\n\nWe are finally ready to install Velero. Run the following command:\n```\nvelero install \\\n    --provider aws \\\n    --plugins velero/velero-plugin-for-aws:v1.0.0 \\\n    --bucket backup-ocp \\\n    --secret-file ./credentials-velero \\\n    --use-volume-snapshots=true \\\n    --backup-location-config region=us-geo,s3ForcePathStyle=\"true\",s3Url=http://s3.direct.us.cloud-object-storage.appdomain.cloud\n```\n\nAnd you should see the following output:\n\n```\nCustomResourceDefinition/backups.velero.io: attempting to create resource\nCustomResourceDefinition/backups.velero.io: already exists, proceeding\nCustomResourceDefinition/backups.velero.io: created\nCustomResourceDefinition/backupstoragelocations.velero.io: attempting to create resource\nCustomResourceDefinition/backupstoragelocations.velero.io: already exists, proceeding\nCustomResourceDefinition/backupstoragelocations.velero.io: created\nCustomResourceDefinition/deletebackuprequests.velero.io: attempting to create resource\nCustomResourceDefinition/deletebackuprequests.velero.io: already exists, proceeding\nCustomResourceDefinition/deletebackuprequests.velero.io: created\nCustomResourceDefinition/downloadrequests.velero.io: attempting to create resource\nCustomResourceDefinition/downloadrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/downloadrequests.velero.io: created\nCustomResourceDefinition/podvolumebackups.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumebackups.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumebackups.velero.io: created\nCustomResourceDefinition/podvolumerestores.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumerestores.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumerestores.velero.io: created\nCustomResourceDefinition/resticrepositories.velero.io: attempting to create resource\nCustomResourceDefinition/resticrepositories.velero.io: already exists, proceeding\nCustomResourceDefinition/resticrepositories.velero.io: created\nCustomResourceDefinition/restores.velero.io: attempting to create resource\nCustomResourceDefinition/restores.velero.io: already exists, proceeding\nCustomResourceDefinition/restores.velero.io: created\nCustomResourceDefinition/schedules.velero.io: attempting to create resource\nCustomResourceDefinition/schedules.velero.io: already exists, proceeding\nCustomResourceDefinition/schedules.velero.io: created\nCustomResourceDefinition/serverstatusrequests.velero.io: attempting to create resource\nCustomResourceDefinition/serverstatusrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/serverstatusrequests.velero.io: created\nCustomResourceDefinition/volumesnapshotlocations.velero.io: attempting to create resource\nCustomResourceDefinition/volumesnapshotlocations.velero.io: already exists, proceeding\nCustomResourceDefinition/volumesnapshotlocations.velero.io: created\nWaiting for resources to be ready in cluster...\nNamespace/velero: attempting to create resource\nNamespace/velero: already exists, proceeding\nNamespace/velero: created\nClusterRoleBinding/velero: attempting to create resource\nClusterRoleBinding/velero: already exists, proceeding\nClusterRoleBinding/velero: created\nServiceAccount/velero: attempting to create resource\nServiceAccount/velero: created\nSecret/cloud-credentials: attempting to create resource\nSecret/cloud-credentials: created\nBackupStorageLocation/default: attempting to create resource\nBackupStorageLocation/default: created\nVolumeSnapshotLocation/default: attempting to create resource\nVolumeSnapshotLocation/default: created\nDeployment/velero: attempting to create resource\nDeployment/velero: created\nVelero is installed! ⛵ Use 'kubectl logs deployment/velero -n velero' to view the status.\n```\nNow, we need to test it. Create some Kubernetes resources\n\nTo test the backup procedure, let’s first create some Kubernetes resources. It doesn’t matter which resource, so I will stick to a simple one: ConfigMap. Run the following script to create an OpenShift project and many ConfigMaps:\n\n```\noc new-project test-backup\nfor i in {1..20}; do echo Creating ConfigMap $i; oc create configmap cm-$i --from-literal=\"key=$i\"; done\n```\nThe lines above create a new project and 20 ConfigMaps. Run the following command to confirm\n\n### Back up OpenShift\n\nNow, we can test the backup procedure. For simplicity, we are going to back up only the test-backup project, but the same concept applies to any (or all) projects. Run the following command:\n```\nvelero backup create my-backup --include-namespaces test-backup\n```\nYou will get following output:\n```\nBackup request \"my-backup\" submitted successfully.\nRun `velero backup describe my-backup` or `velero backup logs my-backup0` for more details.\n```\nAfter a few seconds, you can check the backup has completed:\n\n```\noc get backup -n velero my-backup -o jsonpath='{.status.phase}'\n```\nNow delete these configmaps: \n```\noc delete configmap cm-{1..20}\n```\n\n### Restoring the environment\n\nLet’s now restore the backup that Velero created:\n```\nvelero restore create --from-backup my-backup\n```\nYou will get following output:\n```\nRestore request \"my-backup-20201106170117\" submitted successfully.\nRun `velero restore describe my-backup-20201106170117` or `velero restore logs my-backup-20201106170117` for more details.\n```\nYou can validate by running the following command:\n```\noc get configmap\n```\nIt should return no configmap:\n```\no resources found in test-backup namespace\n```\n\n</Tab>\n\n<Tab label=\"Minio\" open=\"false\">\n\nIn this example we are going to demonstrate Velero with Minio as object storage.\n\n### Clone the Velero repository\n\n```\ngit clone https://github.com/vmware-tanzu/velero.git\n```\n### create a project velero in openshift\n\n```\noc new-project velero\n```\n\n### Install MinIO\n```\ncd velero\noc apply -f examples/minio/00-minio-deployment.yaml\n```\n\nAnd you should see the output like this:\n```\nnamespace/velero created\ndeployment.apps/minio created\nservice/minio created\njob.batch/minio-setup created\n```\n### Expose MinIO\n\nNow, we need to expose the MinIO service outside the cluster, so that the velero CLI can interact with it. In OpenShift, this is pretty simple:\n```\noc project velero\noc expose svc minio\n```\nYou should see the following output:\n```\nroute.route.openshift.io/minio exposed\n```\n\nYou can get the information about the route by running the following command:\n```\noc get route minio\n```\nYou should be able to open the URL listed there and log in using user: minio and password: minio123\nInstall Velero CLI\n\nNext, we need to install the Velero CLI in the local machine. For Mac, run the following command:\n```\nbrew install velero\n```\n\n### Create credential file\n\nNext, we need to create the Minio credential file. So create a file named credentials-velero with the following content:\n\n```\n[default]\naws_access_key_id = minio\naws_secret_access_key = minio123\n```\n### Install Velero\n\nWe are finally ready to install Velero. Run the following command:\n```\nvelero install \\\n    --provider aws \\\n    --plugins velero/velero-plugin-for-aws:v1.0.0 \\\n    --bucket velero \\\n    --secret-file ./credentials-velero \\\n    --use-volume-snapshots=false \\\n    --backup-location-config region=minio,s3ForcePathStyle=\"true\",s3Url=http://minio.velero.svc:9000\n```\n\nAnd you should see the following output:\n```\nCustomResourceDefinition/backups.velero.io: attempting to create resource\nCustomResourceDefinition/backups.velero.io: already exists, proceeding\nCustomResourceDefinition/backups.velero.io: created\nCustomResourceDefinition/backupstoragelocations.velero.io: attempting to create resource\nCustomResourceDefinition/backupstoragelocations.velero.io: already exists, proceeding\nCustomResourceDefinition/backupstoragelocations.velero.io: created\nCustomResourceDefinition/deletebackuprequests.velero.io: attempting to create resource\nCustomResourceDefinition/deletebackuprequests.velero.io: already exists, proceeding\nCustomResourceDefinition/deletebackuprequests.velero.io: created\nCustomResourceDefinition/downloadrequests.velero.io: attempting to create resource\nCustomResourceDefinition/downloadrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/downloadrequests.velero.io: created\nCustomResourceDefinition/podvolumebackups.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumebackups.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumebackups.velero.io: created\nCustomResourceDefinition/podvolumerestores.velero.io: attempting to create resource\nCustomResourceDefinition/podvolumerestores.velero.io: already exists, proceeding\nCustomResourceDefinition/podvolumerestores.velero.io: created\nCustomResourceDefinition/resticrepositories.velero.io: attempting to create resource\nCustomResourceDefinition/resticrepositories.velero.io: already exists, proceeding\nCustomResourceDefinition/resticrepositories.velero.io: created\nCustomResourceDefinition/restores.velero.io: attempting to create resource\nCustomResourceDefinition/restores.velero.io: already exists, proceeding\nCustomResourceDefinition/restores.velero.io: created\nCustomResourceDefinition/schedules.velero.io: attempting to create resource\nCustomResourceDefinition/schedules.velero.io: already exists, proceeding\nCustomResourceDefinition/schedules.velero.io: created\nCustomResourceDefinition/serverstatusrequests.velero.io: attempting to create resource\nCustomResourceDefinition/serverstatusrequests.velero.io: already exists, proceeding\nCustomResourceDefinition/serverstatusrequests.velero.io: created\nCustomResourceDefinition/volumesnapshotlocations.velero.io: attempting to create resource\nCustomResourceDefinition/volumesnapshotlocations.velero.io: already exists, proceeding\nCustomResourceDefinition/volumesnapshotlocations.velero.io: created\nWaiting for resources to be ready in cluster...\nNamespace/velero: attempting to create resource\nNamespace/velero: already exists, proceeding\nNamespace/velero: created\nClusterRoleBinding/velero: attempting to create resource\nClusterRoleBinding/velero: already exists, proceeding\nClusterRoleBinding/velero: created\nServiceAccount/velero: attempting to create resource\nServiceAccount/velero: created\nSecret/cloud-credentials: attempting to create resource\nSecret/cloud-credentials: created\nBackupStorageLocation/default: attempting to create resource\nBackupStorageLocation/default: created\nDeployment/velero: attempting to create resource\nDeployment/velero: created\nVelero is installed! ⛵ Use 'kubectl logs deployment/velero -n velero' to view the status.\n```\n\nNow, we need to test it.\nCreate some Kubernetes resources\n\nTo test the backup procedure, let’s first create some Kubernetes resources. It doesn’t matter which resource, so I will stick to a simple one: ConfigMap. Run the following script to create an OpenShift project and many ConfigMaps:\n```\noc new-project test-backup\nfor i in {1..20}; do echo Creating ConfigMap $i; oc create configmap cm-$i --from-literal=\"key=$i\"; done\n```\nThe lines above create a new project and 20 ConfigMaps. Run the following command to confirm:\n```\noc get configmap\n```\n\n### Back up OpenShift\n\nNow, we can test the backup procedure. For simplicity, we are going to back up only the test-backup project, but the same concept applies to any (or all) projects. Run the following command:\n```\nvelero backup create my-backup --include-namespaces test-backup\n```\nand you will see the following output:\n```\nBackup request \"my-backup\" submitted successfully.\nRun `velero backup describe my-backup` or `velero backup logs my-backup` for more details.\n```\nAfter a few seconds, you can check the backup has completed:\n```\nvelero backup describe my-backup\n```\nnow delete these configmaps: \n```\noc delete configmap cm-{1..20}\n```\nYou can validate by running the following command:\n```\noc get configmap\n```\nIt should return no configmap:\n```\no resources found in test-backup namespace\n```\n\n### Restoring the environment\n\nLet’s now restore the backup that Velero created:\n\n```\nvelero restore create --from-backup my-backup\n```\nyou will see the following output:\n```\nRestore request \"my-backup-20201022164948\" submitted successfully.\nRun `velero restore describe my-backup-20201022164948` or `velero restore logs my-backup-20201022164948` for more details.\n```\nNow, we can check the result:\n```\noc get cm\n```\nAnd you should see the 20 ConfigMaps restored.\n\n</Tab>\n</Tabs>\n\n\n\nRefrences:\n- https://medium.com/ibm-garage/how-to-install-velero-in-an-openshift-environment-f7484fabbbe4\n- https://medium.com/@mlrborowski/using-ark-and-restic-to-provide-dr-for-ibm-kubernetes-service-cae53cfe532\n- https://velero.io/docs/v1.5/contributions/ibm-config/#docs\n- https://blog.kubernauts.io/backup-and-restore-of-kubernetes-applications-using-heptios-velero-with-restic-and-rook-ceph-as-2e8df15b1487\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/home/runner/work/ibm-enterprise-runbooks/ibm-enterprise-runbooks/src/pages/redhat/backup-restore/index.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","243517648","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550","817386451"]}